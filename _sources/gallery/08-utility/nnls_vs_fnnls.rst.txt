
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/08-utility/nnls_vs_fnnls.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_08-utility_nnls_vs_fnnls.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_08-utility_nnls_vs_fnnls.py:


FNNLS vs NNLS
=============

Comparing the ``scipy.optimize.nnls`` function with a better method: "Fast Nonnegative Least Squares (FNNLS)

.. GENERATED FROM PYTHON SOURCE LINES 7-44


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/liamrobinson/Documents/PyLightCurves/examples/08-utility/nnls_vs_fnnls.py", line 22, in <module>
        mr.tic()
      File "/Users/liamrobinson/Documents/PyLightCurves/mirage/profiling.py", line 23, in tic
        raise Exception("tic() called with another tic() active!")
    Exception: tic() called with another tic() active!






|

.. code-block:: default


    import numpy as np
    from scipy.optimize import nnls

    import mirage as mr
    import mirage.vis as mrv

    test_sizes = np.arange(100, 2001, 200, dtype=np.int16)
    t_old = np.zeros_like(test_sizes, dtype=np.float64)
    t_new = np.zeros_like(t_old)
    n_each = 10

    for i, s in enumerate(test_sizes):
        n, m = s, s

        mr.tic()
        for j in range(n_each):
            Z = np.abs(np.random.rand(n, m))
            x = np.abs(np.random.rand(n))
            fres = mr.vendrow_fnnls(Z, x)[0]
        t_new[i] = mr.toc(return_elapsed_seconds=True) / n_each

        mr.tic()
        for j in range(n_each):
            Z = np.abs(np.random.rand(n, m))
            x = np.abs(np.random.rand(n))
            nres = nnls(Z, x)[0]
        t_old[i] = mr.toc(return_elapsed_seconds=True) / n_each

    import matplotlib.pyplot as plt

    plt.plot(test_sizes, t_old)
    plt.plot(test_sizes, t_new)
    mrv.texit(
        "scipy NNLS vs FNNLS", "Matrix size", "Time elapsed [sec]", ["scipy", "FNNLS"]
    )
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.002 seconds)


.. _sphx_glr_download_gallery_08-utility_nnls_vs_fnnls.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: nnls_vs_fnnls.py <nnls_vs_fnnls.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: nnls_vs_fnnls.ipynb <nnls_vs_fnnls.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
