
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/08-utility/egi_figs_aas22.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_08-utility_egi_figs_aas22.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_08-utility_egi_figs_aas22.py:


EGI Optimization
================
EGI optimization figures recreated in Python, originally published in :cite:p:robinson2022:.

.. GENERATED FROM PYTHON SOURCE LINES 6-42

.. code-block:: default


    import numpy as np
    import pyvista as pv

    import mirage as mr
    import mirage.vis as mrv


    def plot_egi(
        pl: pv.Plotter,
        obj: mr.SpaceObject,
        egi: np.ndarray,
        scale: float = 1.5,
        plot_stems: bool = True,
        plot_sphere: bool = True,
        scale_opacity: bool = True,
    ) -> None:
        un, ua = mr.hat(egi), mr.vecnorm(egi)
        scale *= np.max(mr.vecnorm(obj.v))
        stems = np.hstack([0 * un, scale * un, 0 * un]).reshape(-1, 3)
        opacity = np.log10(ua.flatten())
        mrv.scatter3(
            pl,
            scale * un,
            color="c",
            point_size=50,
            opacity=opacity if scale_opacity else None,
            show_scalar_bar=False,
        )
        if plot_stems:
            mrv.plot3(pl, stems, color="k", line_width=5)
        if plot_sphere:
            mrv.two_sphere(pl, scale, color="linen", opacity=0.1)
        pl.disable_anti_aliasing()









.. GENERATED FROM PYTHON SOURCE LINES 43-44

Plotting the EGI of a cube

.. GENERATED FROM PYTHON SOURCE LINES 44-53

.. code-block:: default

    obj = mr.SpaceObject("cube.obj")
    cpos = [10, 10, 5]

    pl = pv.Plotter()
    mrv.render_spaceobject(pl, obj, opacity=1, color="linen")
    plot_egi(pl, obj, obj.egi, scale_opacity=False)
    pl.camera.position = cpos
    pl.show()




.. image-sg:: /gallery/08-utility/images/sphx_glr_egi_figs_aas22_001.png
   :alt: egi figs aas22
   :srcset: /gallery/08-utility/images/sphx_glr_egi_figs_aas22_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 54-55

Plotting the initial optimized EGI

.. GENERATED FROM PYTHON SOURCE LINES 55-72

.. code-block:: default

    n = 500
    brdf = mr.Brdf("phong", cd=0.5, cs=0.5, n=10)
    normal_candidates = mr.fibonacci_sample_sphere(n)
    svb = mr.rand_unit_vectors(n)
    ovb = mr.rand_unit_vectors(n)
    g_candidates = brdf.compute_reflection_matrix(svb, ovb, normal_candidates)
    lc = obj.convex_light_curve(brdf, svb, ovb)
    a_candidates = np.expand_dims(mr.vendrow_fnnls(g_candidates, lc.flatten())[0], axis=1)
    valid = a_candidates.flatten() > np.sum(a_candidates) / 100
    egi_candidate = normal_candidates[valid, :] * a_candidates[valid, :]

    pl = pv.Plotter()
    mrv.render_spaceobject(pl, obj, opacity=0.5, color="linen")
    plot_egi(pl, obj, egi_candidate, scale_opacity=True)
    pl.camera.position = cpos
    pl.show()




.. image-sg:: /gallery/08-utility/images/sphx_glr_egi_figs_aas22_002.png
   :alt: egi figs aas22
   :srcset: /gallery/08-utility/images/sphx_glr_egi_figs_aas22_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 73-74

Plotting the resampled EGI

.. GENERATED FROM PYTHON SOURCE LINES 74-94

.. code-block:: default


    resampled_n_candidates = []
    nc = 100
    for n_cand in mr.hat(egi_candidate):
        resampled_n_candidates.append(mr.rand_cone_vectors(n_cand, np.pi / 20, nc))
    resampled_n_candidates = np.vstack(resampled_n_candidates)

    g_candidates = brdf.compute_reflection_matrix(svb, ovb, resampled_n_candidates)
    lc = obj.convex_light_curve(brdf, svb, ovb)
    a_candidates = np.expand_dims(mr.vendrow_fnnls(g_candidates, lc.flatten())[0], axis=1)
    valid = a_candidates.flatten() > np.sum(a_candidates) / 100
    egi_candidate_resampled = resampled_n_candidates[valid, :] * a_candidates[valid, :]

    pl = pv.Plotter()
    mrv.render_spaceobject(pl, obj, color="linen", opacity=0.5)
    mrv.scatter3(pl, 1.2 * resampled_n_candidates, color="r", point_size=3, opacity=0.5)
    plot_egi(pl, obj, egi_candidate_resampled, scale_opacity=True)
    pl.camera.position = cpos
    pl.show()




.. image-sg:: /gallery/08-utility/images/sphx_glr_egi_figs_aas22_003.png
   :alt: egi figs aas22
   :srcset: /gallery/08-utility/images/sphx_glr_egi_figs_aas22_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-96

Plotting merged EGI

.. GENERATED FROM PYTHON SOURCE LINES 96-105

.. code-block:: default


    egi_merged = mr.merge_clusters(egi_candidate_resampled, np.pi / 10)

    pl = pv.Plotter()
    mrv.render_spaceobject(pl, obj, color="linen", opacity=0.5)
    plot_egi(pl, obj, egi_merged)
    pl.camera.position = cpos
    pl.show()




.. image-sg:: /gallery/08-utility/images/sphx_glr_egi_figs_aas22_004.png
   :alt: egi figs aas22
   :srcset: /gallery/08-utility/images/sphx_glr_egi_figs_aas22_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 106-107

Plotting the reconstructed object

.. GENERATED FROM PYTHON SOURCE LINES 107-121

.. code-block:: default

    egi_merged -= np.sum(egi_merged, axis=0) / egi_merged.shape[0]
    h = mr.optimize_supports_little(egi_merged)
    obj_reconstructed = mr.construct_from_egi_and_supports(egi_merged, h)

    pl = pv.Plotter(shape=(1, 2), window_size=(1000, 500))
    pl.subplot(0, 0)
    mrv.render_spaceobject(pl, obj, opacity=1, color="linen")
    pl.add_text("Original", font="courier", position="upper_left")
    pl.subplot(0, 1)
    mrv.render_spaceobject(pl, obj_reconstructed, opacity=1, color="linen")
    pl.add_text("Reconstructed", font="courier", position="upper_left")
    pl.link_views()
    pl.camera.position = cpos
    pl.show()



.. image-sg:: /gallery/08-utility/images/sphx_glr_egi_figs_aas22_005.png
   :alt: egi figs aas22
   :srcset: /gallery/08-utility/images/sphx_glr_egi_figs_aas22_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | niter |f evals|CG iter|  obj func   |tr radius |   opt    |  c viol  | penalty  |barrier param|CG stop|
    |-------|-------|-------|-------------|----------|----------|----------|----------|-------------|-------|
    |   1   |   1   |   0   | +1.0000e+00 | 1.00e+00 | 3.74e-02 | 9.99e-01 | 1.00e+00 |  1.00e-01   |   0   |
    /Users/liamrobinson/Documents/PyLightCurves/lib/python3.10/site-packages/scipy/optimize/_hessian_update_strategy.py:182: UserWarning: delta_grad == 0.0. Check if the approximated function is linear. If the function is linear better results can be obtained by defining the Hessian as zero instead of using quasi-Newton approximations.
      warn('delta_grad == 0.0. Check if the approximated '
    |   2   |   2   |   1   | +6.3608e+00 | 5.63e+00 | 1.36e-01 | 8.35e-01 | 8.49e+00 |  1.00e-01   |   4   |
    |   3   |   3   |   2   | +6.3608e+00 | 5.63e-01 | 1.36e-01 | 8.35e-01 | 8.49e+00 |  1.00e-01   |   4   |
    |   4   |   4   |   3   | +1.0138e+01 | 3.16e+00 | 1.39e-02 | 3.28e-01 | 1.28e+02 |  1.00e-01   |   4   |
    |   5   |   5   |   4   | +1.1789e+01 | 4.92e+00 | 2.13e-03 | 5.63e-02 | 1.28e+02 |  1.00e-01   |   4   |
    |   6   |   5   |   4   | +1.1789e+01 | 2.46e+01 | 1.99e-03 | 5.63e-02 | 1.00e+00 |  2.00e-02   |   0   |
    |   7   |   6   |   5   | +1.1579e+01 | 2.46e+01 | 2.54e-03 | 9.94e-04 | 1.00e+00 |  2.00e-02   |   4   |

    `gtol` termination condition is satisfied.
    Number of iterations: 7, function evaluations: 6, CG iterations: 5, optimality: 2.54e-03, constraint violation: 9.94e-04, execution time: 0.34 s.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.800 seconds)


.. _sphx_glr_download_gallery_08-utility_egi_figs_aas22.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: egi_figs_aas22.py <egi_figs_aas22.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: egi_figs_aas22.ipynb <egi_figs_aas22.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
