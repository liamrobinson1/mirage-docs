
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/00-orbits/ground_track.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_00-orbits_ground_track.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_00-orbits_ground_track.py:


Ground Tracks
=============

Plots the ground track for a GPS satellite

.. GENERATED FROM PYTHON SOURCE LINES 7-17

.. code-block:: default



    import os

    import matplotlib.pyplot as plt
    import numpy as np
    from PIL import Image

    import mirage as mr








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Let's set up a space of dates to operate on

.. GENERATED FROM PYTHON SOURCE LINES 19-22

.. code-block:: default


    dates = mr.date_linspace(mr.now(), mr.now() + mr.days(1), 8640) - mr.days(100)








.. GENERATED FROM PYTHON SOURCE LINES 23-24

And propagate one of the NAVSTAR satellites to all the dates

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: default

    obj = mr.SpaceObject("cube.obj", identifier="NAVSTAR 81 (USA 319)")
    r_eci = obj.propagate(dates)








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Converting the propagated result into ECEF, then LLA

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default

    r_ecef = mr.stack_mat_mult_vec(mr.j2000_to_itrf(dates), r_eci)
    lla = mr.itrf_to_lla(r_ecef)








.. GENERATED FROM PYTHON SOURCE LINES 33-34

Finally, plotting the resulting Earth-fixed trajectory with the Earth in the background

.. GENERATED FROM PYTHON SOURCE LINES 34-44

.. code-block:: default

    im = Image.open(
        os.path.join(os.environ["TEXDIR"], "world.topo.bathy.200412.3x5400x2700.jpg")
    )
    plt.imshow(im, extent=(-180, 180, -90, 90))
    plt.scatter(np.rad2deg(lla[1]), np.rad2deg(lla[0]), s=1, c="m")
    plt.title(f"{obj.satnum} Ground Track")
    plt.xlabel("Longitude [deg]")
    plt.ylabel("Latitude [deg]")
    plt.show()




.. image-sg:: /gallery/00-orbits/images/sphx_glr_ground_track_001.png
   :alt: 48859 Ground Track
   :srcset: /gallery/00-orbits/images/sphx_glr_ground_track_001.png, /gallery/00-orbits/images/sphx_glr_ground_track_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 45-47

Repeating with PyGMT
====================

.. GENERATED FROM PYTHON SOURCE LINES 47-80

.. code-block:: default


    import pygmt

    # Create a new instance or object of the pygmt.Figure() class
    fig = pygmt.Figure()
    projection = "N12c"
    # projection = "G-90/10/12c"
    # Orthographic projection (G) with projection center at 0° East and
    # 15° North and a width of 12 centimeters
    fig.coast(
        projection=projection,
        region="g",  # global
        frame="g30",  # Add frame and gridlines in steps of 30 degrees on top
        land="gray",  # Color land masses in "gray"
        water="lightblue",  # Color water masses in "lightblue"
        # Add coastlines with a 0.25 points thick pen in "gray50"
        shorelines="1/0.25p,gray50",
    )

    x, y = np.rad2deg(lla[1]), np.rad2deg(lla[0])
    fig.plot(x=x, y=y, pen="1.5p,red")

    sl = slice(0, len(dates), len(dates) // 10)
    rg = range(0, len(dates), len(dates) // 10)

    fig.text(
        text=[d.strftime("%H:%M UTC") for d in dates[sl]],
        x=x[sl],
        y=y[sl],
        font="9p,Courier-Bold,black",
    )

    fig.show()



.. image-sg:: /gallery/00-orbits/images/sphx_glr_ground_track_002.png
   :alt: ground track
   :srcset: /gallery/00-orbits/images/sphx_glr_ground_track_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.075 seconds)


.. _sphx_glr_download_gallery_00-orbits_ground_track.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: ground_track.py <ground_track.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: ground_track.ipynb <ground_track.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
