
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/06-attitude/orthogonal_procrustes.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_06-attitude_orthogonal_procrustes.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_06-attitude_orthogonal_procrustes.py:


Orthogonal Procrustes
=====================

Solving the orthogonal procrustes problem via the SVD and Davenport's q-method

.. GENERATED FROM PYTHON SOURCE LINES 7-25

.. code-block:: Python


    import numpy as np
    from scipy.linalg import orthogonal_procrustes

    import mirage as mr

    rhat_ref = mr.rand_cone_vectors(np.array([1.0, 0.0, 0.0]), 0.1, 5)
    q_true = mr.rand_quaternions(1)
    A_true = mr.quat_to_dcm(q_true)
    rhat_body = mr.stack_mat_mult_vec(A_true, rhat_ref)

    A_opro = orthogonal_procrustes(rhat_body, rhat_ref)[0]
    q_opro = mr.dcm_to_quat(A_opro)

    print(
        mr.wrap_to_180(mr.quat_ang(q_true, q_opro) * 180 / np.pi).squeeze()
    )  # Error in degrees





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.0




.. GENERATED FROM PYTHON SOURCE LINES 26-27

Davenport's q-method

.. GENERATED FROM PYTHON SOURCE LINES 27-33

.. code-block:: Python


    q_davenport = mr.davenport(rhat_body, rhat_ref)
    print(
        mr.wrap_to_180(mr.quat_ang(q_true, q_davenport) * 180 / np.pi).squeeze()
    )  # Error in degrees





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.0




.. GENERATED FROM PYTHON SOURCE LINES 34-35

Let's iteratively apply Davenport's q-method, for fun! We see that we get the same final quaternion

.. GENERATED FROM PYTHON SOURCE LINES 35-44

.. code-block:: Python


    rbt = rhat_body.copy()
    q_total = np.array([0.0, 0.0, 0.0, 1.0])
    for i in range(10):
        dq = mr.davenport(rbt, rhat_ref)
        rbt = mr.stack_mat_mult_vec(mr.quat_to_dcm(dq).T, rbt)
        q_total = mr.quat_add(dq, q_total)

    print(q_total)
    print(q_true)



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[-0.32979911  0.31383096  0.86083037  0.22740659]]
    [[-0.32979911  0.31383096  0.86083037  0.22740659]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.010 seconds)


.. _sphx_glr_download_gallery_06-attitude_orthogonal_procrustes.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: orthogonal_procrustes.ipynb <orthogonal_procrustes.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: orthogonal_procrustes.py <orthogonal_procrustes.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
