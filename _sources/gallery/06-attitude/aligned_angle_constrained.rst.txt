
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/06-attitude/aligned_angle_constrained.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_06-attitude_aligned_angle_constrained.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_06-attitude_aligned_angle_constrained.py:


Aligned and Constrained
=======================

Simulates and animates an aligned and constrained attitude profile

.. note:: If you want to record a .mp4 video instead, try ``pl.open_movie("aligned_and_constrained.mov", framerate=30, quality=9)``

.. GENERATED FROM PYTHON SOURCE LINES 9-80



.. image-sg:: /gallery/06-attitude/images/sphx_glr_aligned_angle_constrained_001.gif
   :alt: aligned angle constrained
   :srcset: /gallery/06-attitude/images/sphx_glr_aligned_angle_constrained_001.gif
   :class: sphx-glr-single-img





.. code-block:: default



    import datetime

    import numpy as np
    import pyvista as pv

    import pyspaceaware as ps
    import pyspaceaware.vis as psv

    data_points = 100
    obj = ps.SpaceObject("tess.obj", identifier="INTELSAT 511")
    date = ps.utc(2022, 12, 9, 14)
    (date_space, epsec_space) = ps.date_linspace(
        date,
        date + datetime.timedelta(hours=24),
        data_points,
        return_epsecs=True,
    )
    (r, v) = obj.propagate(date_space, return_velocity=True)

    orbit_normal = ps.hat(np.cross(r, v))
    sat_nadir = -ps.hat(r)
    t = epsec_space / np.max(epsec_space) * 4 * np.pi

    sat_sun = ps.hat(ps.sun(date_space))
    att = ps.AlignedAndConstrainedAttitude(
        sat_nadir, sat_sun, date_space, axis_order=(2, 0, 1)
    )
    c = att.dcms_at_dates(date_space)
    quat = ps.dcm_to_quat(c)
    (v1, v2, v3) = att.basis_vectors_at_dates(date_space)

    sun_in_body = ps.stack_mat_mult_vec(c, sat_sun)
    obs_in_body = ps.stack_mat_mult_vec(c, sat_nadir)

    pl = pv.Plotter()
    pl.open_gif("aligned_and_constrained.gif")

    psv.plot3(pl, r, color="cyan")

    omesh = obj._mesh.copy()
    cdist = 300
    pdist = cdist / 4
    psize = 30
    pl._on_first_render_request()
    pl.render()
    for i in range(data_points - 1):
        pl.camera.position = (
            r[i, :] - cdist * sat_nadir[i, :] + cdist / 10 * orbit_normal[i, :]
        )
        pl.camera.focal_point = r[i, :]
        psv.render_spaceobject(
            pl, obj, origin=r[i, :], scale=10, opacity=1.0, quat=quat[i, :]
        )
        psv.plot_arrow(pl, r[i, :], v1[i, :], scale=pdist, name="arr_v1")
        psv.plot_arrow(pl, r[i, :], v2[i, :], scale=pdist, name="arr_v2")
        psv.plot_arrow(pl, r[i, :], v3[i, :], scale=pdist, name="arr_v3")
        psv.plot_arrow(
            pl,
            r[i, :],
            sat_sun[i, :],
            scale=pdist,
            name="arr_sun",
            color="y",
            label="Sun",
        )
        psv.plot_earth(pl, date=date_space[i], atmosphere=True, night_lights=True)
        pl.write_frame()
        obj._mesh.copy_from(omesh)
    pl.close()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  48.148 seconds)


.. _sphx_glr_download_gallery_06-attitude_aligned_angle_constrained.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: aligned_angle_constrained.py <aligned_angle_constrained.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: aligned_angle_constrained.ipynb <aligned_angle_constrained.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
