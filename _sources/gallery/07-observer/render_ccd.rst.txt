
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/07-observer/render_ccd.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_07-observer_render_ccd.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_07-observer_render_ccd.py:


CCD Rendering
=============

Renders a synthetic CCD image of an observation taken by the POGS telescope

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: default


    import datetime
    import os

    import matplotlib.pyplot as plt
    import numpy as np







.. GENERATED FROM PYTHON SOURCE LINES 14-15

Loading a fits image from the Purdue Optical Ground Station

.. GENERATED FROM PYTHON SOURCE LINES 15-68

.. code-block:: default

    from astropy.io import fits

    import mirage as mr
    import mirage.vis as mrv

    with fits.open(os.path.join(os.environ['SRCDIR'], '..', 'examples/07-observer/00095337.fit')) as hdul:
        header = hdul[0].header
        for key in header.keys():
            print(key, header[key])

        date_obs_initial = datetime.datetime.strptime(header['DATE-OBS'], "%Y-%m-%dT%H:%M:%S.%f").replace(tzinfo=datetime.timezone.utc)
        ccd_temp = header['SET-TEMP']
        site_lat_geod_deg = header['OBSGEO-B']
        site_lon_deg = header['OBSGEO-L']
        site_alt_m = header['OBSGEO-H']
        center_azimuth_rad = np.deg2rad(header['CENTAZ'])
        center_elevation_rad = np.deg2rad(header['CENTALT'])
        airmass = header['AIRMASS']
        track_rate_rad_ra = mr.dms_to_rad(0, 0, header['TELTKRA']) # rad/s
        track_rate_rad_dec = mr.dms_to_rad(0, 0, header['TELTKDEC']) # rad/s
        obj_ra_rad_initial = mr.hms_to_rad(*[float(x) for x in header['OBJCTRA'].split(' ')])
        obj_dec_rad_initial = mr.dms_to_rad(*[float(x) for x in header['OBJCTDEC'].split(' ')])
        lst_deg_initial = np.rad2deg(mr.hms_to_rad(*[float(x) for x in header['LST'].split(' ')]))
        integration_time_seconds = header['EXPTIME']
        ccd_adu = hdul[0].data

    date_obs_final = date_obs_initial + mr.seconds(integration_time_seconds)

    observing_station = mr.Station(lat_deg=site_lat_geod_deg, lon_deg=site_lon_deg, alt_km=site_alt_m/1e3)

    station_eci_initial = observing_station.j2000_at_dates(date_obs_initial)
    station_eci_final = observing_station.j2000_at_dates(date_obs_final)

    obj_ra_rad_final = obj_ra_rad_initial + integration_time_seconds * track_rate_rad_ra
    obj_dec_rad_final = obj_dec_rad_initial + integration_time_seconds * track_rate_rad_dec

    obj_look_eci_initial = mr.ra_dec_to_eci(obj_ra_rad_initial, obj_dec_rad_initial)
    obj_look_eci_final = mr.ra_dec_to_eci(obj_ra_rad_final, obj_dec_rad_final)

    eci_from_az_el = observing_station.az_el_to_eci(center_azimuth_rad, center_elevation_rad, date_obs_initial)
    ra_dec_from_eci_from_az_el = mr.eci_to_ra_dec(eci_from_az_el)

    obs_dates = np.array([date_obs_initial, date_obs_final])
    obs_dirs_eci = np.vstack((obj_look_eci_initial, obj_look_eci_final))

    # import pyvista as pv
    # pl = pv.Plotter()
    # mrv.render_observation_scenario(pl, dates=obs_dates, 
    #                             station=observing_station, 
    #                             look_dirs_eci=obs_dirs_eci,
    #                             sensor_extent_km=20e3)
    # pl.show()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SIMPLE True
    BITPIX 16
    NAXIS 2
    NAXIS1 4096
    NAXIS2 4096
    EXTEND True
    COMMENT   FITS (Flexible Image Transport System) format is defined in 'Astronomy
      and Astrophysics', volume 376, page 359; bibcode: 2001A&A...376..359H
    COMMENT   FITS (Flexible Image Transport System) format is defined in 'Astronomy
      and Astrophysics', volume 376, page 359; bibcode: 2001A&A...376..359H
    BZERO 32768
    BSCALE 1
    SBUUID {ffdb5d5a-5082-463b-b76c-4d4ef052c875}
    EXPTIME 10.0
    SWCREATE TheSkyX Version 10.5.0 Build 12304
    COLORCCD 0
    DISPINCR 1
    PICTTYPE 1
    IMAGETYP Light Frame
    XORGSUBF 0
    YORGSUBF 0
    XBINNING 1
    YBINNING 1
    CCD-TEMP -20.0
    SET-TEMP -20.0
    SITELAT +32 54 00.00
    SITELONG +105 32 00.00
    LST +15 54 22.92
    OBSGEO-B 32.9
    OBSGEO-L -105.5333333333
    OBSGEO-H 2225.0
    BTP 0
    CENTAZ 179.319557911902
    CENTALT 47.7403062887023
    AIRMASS 1.35114750406536
    TELEHA -00 01 51.30
    MOUNT Paramount ME II
    TELTKRA 18.2971855
    TELTKDEC 30.646698
    OBJCTRA 15 55 07.452
    OBJCTDEC -09 17 56.03
    INSTRUME FLI Camera Plugin 2.0
    XPIXSZ 9.0
    YPIXSZ 9.0
    READOUTM 8 MHz
    CDS 8 MHz
    FILTER Slot 0/Slot 0
    DATE-OBS 2020-06-02T06:11:48.987
    LOCALTIM 6/2/2020 12:11:48.990 AM DST
    HRZOSCAN 0
    VRTOSCAN 0
    XORG_VIS 0
    YORG_VIS 0
    WID_VIS 4096
    HT_VIS 4096
    RBIFLOOD 0
    RBIFLUSH 0
    RBI_BIN 0
    EXT_TEMP 20.625




.. GENERATED FROM PYTHON SOURCE LINES 69-70

Synthesizing the same image

.. GENERATED FROM PYTHON SOURCE LINES 72-73

Let's synthesize a CCD image for the same observation conditions

.. GENERATED FROM PYTHON SOURCE LINES 73-105

.. code-block:: default


    observing_station.telescope.fwhm = 2

    obj = mr.SpaceObject("matlib_hylas4.obj", identifier=26853)
    r_obj_eci = obj.propagate(obs_dates)

    sv = mr.sun(obs_dates)
    nadir = -mr.hat(r_obj_eci)
    attitude = mr.AlignedAndConstrainedAttitude(
        v_align=nadir,
        v_const=sv,
        dates=obs_dates,
        axis_order=(1, 2, 0),
    )
    obj_lc_sampler, _ = observing_station.observe_light_curve(
        obj,
        attitude,
        mr.Brdf("phong"),
        obs_dates,
        use_engine=True,
        instance_count=1,
        model_scale_factor=1,
        rotate_panels=True,
    )
    lc_adu = obj_lc_sampler()

    mr.tic()
    adu_grid_streaked_sampled = observing_station.telescope.ccd.generate_ccd_image(
        obs_dates, observing_station, obs_dirs_eci, lc_adu, hot_pixel_probability=0, dead_pixel_probability=0,
    )
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    WARNING: no observation constraints assigned!
    Elapsed time: 7.54e+00 seconds




.. GENERATED FROM PYTHON SOURCE LINES 106-107

Let's take a look at the real and synthetic CCD images

.. GENERATED FROM PYTHON SOURCE LINES 107-125

.. code-block:: default


    plt.figure(figsize=(8, 4))
    plt.subplot(1,2,1)
    plt.imshow(np.log10(ccd_adu), cmap="gist_stern")
    mrv.texit(
        f'POGS CCD', "", "", grid=False
    )
    plt.colorbar(cax=mrv.get_cbar_ax(), label="$\log_{10}(ADU)$")

    plt.subplot(1,2,2)
    plt.imshow(np.log10(adu_grid_streaked_sampled), cmap="gist_stern")
    mrv.texit(
        f'Synthetic CCD', "", "", grid=False
    )
    plt.colorbar(cax=mrv.get_cbar_ax(), label="$\log_{10}(ADU)$")
    plt.tight_layout()
    plt.show()




.. image-sg:: /gallery/07-observer/images/sphx_glr_render_ccd_001.png
   :alt: POGS CCD, Synthetic CCD
   :srcset: /gallery/07-observer/images/sphx_glr_render_ccd_001.png, /gallery/07-observer/images/sphx_glr_render_ccd_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 126-127

Inspecting the backgrounds

.. GENERATED FROM PYTHON SOURCE LINES 127-154

.. code-block:: default


    frac_cuts = (1e-4, 5e-3)
    thresh = slice(int(frac_cuts[0] * adu_grid_streaked_sampled.size), int((1-frac_cuts[1]) * adu_grid_streaked_sampled.size))
    synth_br_data = np.sort(adu_grid_streaked_sampled.flatten())[thresh][::100]
    real_br_data = np.sort(ccd_adu.flatten())[thresh][::100]

    synth_br = np.mean(synth_br_data)
    real_br = np.mean(real_br_data)

    synth_br_poisson_samples = np.random.poisson(synth_br, synth_br_data.size)
    real_br_poisson_samples = np.random.poisson(real_br, real_br_data.size)

    plt.subplot(1,2,2)
    bins = np.arange(np.min(synth_br_data), np.max(synth_br_data))
    hist_args = dict(density=True, bins=bins, alpha=0.7)
    plt.hist(synth_br_data, **hist_args)
    plt.hist(synth_br_poisson_samples, **hist_args)
    mrv.texit("Synthetic backgrounds", "ADU", "Density", ["Image", "Poisson fit"])

    plt.subplot(1,2,1)
    hist_args['bins'] = np.arange(np.min(real_br_poisson_samples), np.max(real_br_poisson_samples))
    plt.hist(real_br_data, **hist_args)
    plt.hist(real_br_poisson_samples, **hist_args)
    mrv.texit("Real backgrounds", "ADU", "Density", ["Image", "Poisson fit"])

    plt.tight_layout()
    plt.gcf().set_size_inches(8, 4)
    plt.show()


.. image-sg:: /gallery/07-observer/images/sphx_glr_render_ccd_002.png
   :alt: Synthetic backgrounds, Real backgrounds
   :srcset: /gallery/07-observer/images/sphx_glr_render_ccd_002.png, /gallery/07-observer/images/sphx_glr_render_ccd_002_2_00x.png 2.00x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.605 seconds)


.. _sphx_glr_download_gallery_07-observer_render_ccd.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: render_ccd.py <render_ccd.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: render_ccd.ipynb <render_ccd.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
