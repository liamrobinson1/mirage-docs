
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/07-observer/atmos_refraction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_07-observer_atmos_refraction.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_07-observer_atmos_refraction.py:


Atmospheric Refraction
======================
Computing the effect of atmospheric refraction on observations

.. GENERATED FROM PYTHON SOURCE LINES 6-49



.. image-sg:: /gallery/07-observer/images/sphx_glr_atmos_refraction_001.png
   :alt: Atmospheric Refraction
   :srcset: /gallery/07-observer/images/sphx_glr_atmos_refraction_001.png, /gallery/07-observer/images/sphx_glr_atmos_refraction_001_2_00x.png 2.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Elapsed time: 3.47e+00 seconds






|

.. code-block:: default

    import numpy as np
    from scipy.optimize import root

    import mirage as mr
    import mirage.vis as mrv


    def apparent_refacted_elevation(
        pressure_mbar: np.ndarray, temp_kelvin: np.ndarray, el_true_rad: np.ndarray
    ) -> np.ndarray:
        el_true_deg = np.rad2deg(el_true_rad)
        h_func = (
            lambda hprime: -hprime
            + pressure_mbar
            / temp_kelvin
            * (
                3.430289
                * ((90 - hprime) - mr.asind(0.9986047 * mr.sind(0.996714 * (90 - hprime))))
                - 0.01115929 * (90 - hprime)
            )
            / 60
            + el_true_deg
        )
        # If this function is zero, the correct apparent elevation has been identified
        hprime = np.deg2rad(root(fun=h_func, x0=el_true_deg, method="diagbroyden").x)
        return hprime


    true_el = np.deg2rad(np.linspace(0, 90, int(1e5)))

    mr.tic()
    apparent_el = apparent_refacted_elevation(1028.4463393, 277.594, true_el)
    mr.toc()

    import matplotlib.pyplot as plt

    plt.plot(np.rad2deg(true_el), np.rad2deg(apparent_el - true_el))
    mrv.texit(
        "Atmospheric Refraction", "True elevation $h$", "Refraction $R = h' - h$ [deg]"
    )
    plt.xlim(0, 90)
    plt.ylim(0, 0.53)
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.703 seconds)


.. _sphx_glr_download_gallery_07-observer_atmos_refraction.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: atmos_refraction.py <atmos_refraction.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: atmos_refraction.ipynb <atmos_refraction.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
