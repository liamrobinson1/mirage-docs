
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/03-coordinate-systems/precession_and_nutation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_03-coordinate-systems_precession_and_nutation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_03-coordinate-systems_precession_and_nutation.py:


Precession and Nutation
=======================

Viewing the evolution of the instantaneous terrestrial pole due to precession and nutation

.. GENERATED FROM PYTHON SOURCE LINES 7-14

.. code-block:: default


    import numpy as np
    import pyvista as pv

    import mirage as mr
    import mirage.vis as mrv








.. GENERATED FROM PYTHON SOURCE LINES 15-16

Let's use the full range of the datetime module, from near year 0 to near year 9999

.. GENERATED FROM PYTHON SOURCE LINES 16-21

.. code-block:: default

    date0 = mr.utc(2023, 12, 9) - mr.years(2020)
    dates, ep = mr.date_linspace(
        date0, date0 + mr.years(9990), int(1e5), return_epsecs=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 22-23

We then transform the true terrestrial pole in TOD to J2000 to look at the effect of precession and nutation with respect to the J2000 epoch

.. GENERATED FROM PYTHON SOURCE LINES 23-30

.. code-block:: default

    pole_nominal = np.tile(
        np.array([[0, 0, mr.AstroConstants.earth_r_eq * 1.3]]), (dates.size, 1)
    )
    mr.tic()
    pole_instant = mr.EarthFixedFrame("tod", "j2000").vecs_at_dates(dates, pole_nominal)
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/liamrobinson/Documents/PyLightCurves/lib/python3.10/site-packages/erfa/core.py:154: ErfaWarning: ERFA function "dtf2d" yielded 99329 of "dubious year (Note 6)"
      warnings.warn('ERFA function "{}" yielded {}'.format(func_name, wmsg),
    /Users/liamrobinson/Documents/PyLightCurves/lib/python3.10/site-packages/erfa/core.py:154: ErfaWarning: ERFA function "utctai" yielded 99329 of "dubious year (Note 3)"
      warnings.warn('ERFA function "{}" yielded {}'.format(func_name, wmsg),
    Elapsed time: 2.64e+00 seconds




.. GENERATED FROM PYTHON SOURCE LINES 31-32

We can view this data from a distance to view precession

.. GENERATED FROM PYTHON SOURCE LINES 32-40

.. code-block:: default

    pl = pv.Plotter()
    mrv.plot_earth(pl, lighting=False, high_def=True)
    mrv.scatter3(pl, pole_instant, point_size=10)
    pl.camera.focal_point = np.mean(pole_instant, axis=0)
    pl.camera.position = 6 * pole_nominal[0, :] + np.array([1e-4, 1e-4, 0])
    pl.show()





.. image-sg:: /gallery/03-coordinate-systems/images/sphx_glr_precession_and_nutation_001.png
   :alt: precession and nutation
   :srcset: /gallery/03-coordinate-systems/images/sphx_glr_precession_and_nutation_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 41-42

And from close up to show nutation

.. GENERATED FROM PYTHON SOURCE LINES 42-51

.. code-block:: default

    z = 20
    pl = pv.Plotter()
    mrv.plot_earth(pl, lighting=False, high_def=True)
    mrv.plot3(pl, pole_instant, line_width=10, color="m")
    pl.camera.focal_point = pole_instant[0, :]
    pl.camera.position = pole_instant[0, :] + np.array([1e-2, 1e-2, 25_000 / z])
    pl.camera.zoom(z)
    pl.show()




.. image-sg:: /gallery/03-coordinate-systems/images/sphx_glr_precession_and_nutation_002.png
   :alt: precession and nutation
   :srcset: /gallery/03-coordinate-systems/images/sphx_glr_precession_and_nutation_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 52-53

Animating a full zoom sequence

.. GENERATED FROM PYTHON SOURCE LINES 53-65

.. code-block:: default


    pl = pv.Plotter()
    pl.open_gif("precession_nutation_zoom.gif", fps=20)
    mrv.plot_earth(pl, lighting=False, high_def=True)
    mrv.plot3(pl, pole_instant, line_width=10, color="m")
    for z in np.logspace(-10, 30, 100, base=1.2):
        pl.camera = pv.Camera()
        pl.camera.focal_point = pole_instant[0, :]
        pl.camera.position = pole_instant[0, :] + np.array([1e-2, 1e-2, 2_000])
        pl.camera.zoom(z)
        pl.write_frame()
    pl.close()



.. image-sg:: /gallery/03-coordinate-systems/images/sphx_glr_precession_and_nutation_003.gif
   :alt: precession and nutation
   :srcset: /gallery/03-coordinate-systems/images/sphx_glr_precession_and_nutation_003.gif
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  39.812 seconds)


.. _sphx_glr_download_gallery_03-coordinate-systems_precession_and_nutation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: precession_and_nutation.py <precession_and_nutation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: precession_and_nutation.ipynb <precession_and_nutation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
