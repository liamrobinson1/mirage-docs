
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/10-ccd/render_ccd.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_10-ccd_render_ccd.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_10-ccd_render_ccd.py:


CCD Rendering
=============

Renders a synthetic CCD image of an observation taken by the POGS telescope

.. GENERATED FROM PYTHON SOURCE LINES 7-17

.. code-block:: default


    import os

    import matplotlib.pyplot as plt
    import numpy as np
    import pyvista as pv

    import mirage as mr
    import mirage.vis as mrv








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Loading a fits image from the Purdue Optical Ground Station

.. GENERATED FROM PYTHON SOURCE LINES 19-38

.. code-block:: default


    # ccd_dir = os.path.join(os.environ["SRCDIR"], "..", "data")
    # fits_path = os.path.join(ccd_dir, "00130398.fit") # 3 in belt
    # fits_path = os.path.join(
    #     os.environ["SRCDIR"], "..", "00161295.48859.fit"
    # )  # gps

    fits_path = os.path.join(
        os.environ["SRCDIR"], "..", "00161341.GALAXY_23__TELSTAR_13__#27854U.fit"
    )

    # fits_path = "/Users/liamrobinson/Documents/autopogs/imgs/00161175.40733.fit"
    fits_dict = mr.info_from_fits(fits_path)
    obs_dates = fits_dict["dates"]
    observing_station = fits_dict["station"]
    obs_dirs_eci = fits_dict["look_dirs_eci"]
    ccd_adu = fits_dict["ccd_adu"]
    br_parabola_obs = fits_dict["br_parabola"]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SIMPLE True
    BITPIX 16
    NAXIS 2
    NAXIS1 4096
    NAXIS2 4096
    EXTEND True
    COMMENT   FITS (Flexible Image Transport System) format is defined in 'Astronomy
      and Astrophysics', volume 376, page 359; bibcode: 2001A&A...376..359H
    COMMENT   FITS (Flexible Image Transport System) format is defined in 'Astronomy
      and Astrophysics', volume 376, page 359; bibcode: 2001A&A...376..359H
    BZERO 32768
    BSCALE 1
    SBUUID {1b4680fa-af21-4878-8f53-c9c0c80bd9b8}
    EXPTIME 10.0
    SWCREATE TheSkyX Version 10.5.0 Build 12304
    COLORCCD 0
    DISPINCR 1
    PICTTYPE 1
    IMAGETYP Light Frame
    XORGSUBF 0
    YORGSUBF 0
    XBINNING 1
    YBINNING 1
    CCD-TEMP -20.0625
    SET-TEMP -20.0
    SITELAT +32 54 00.00
    SITELONG +105 32 00.00
    LST +06 10 14.10
    OBSGEO-B 32.9
    OBSGEO-L -105.5333333333
    OBSGEO-H 2225.0
    BTP 0
    CENTAZ 206.766869021327
    CENTALT 48.1162736094801
    AIRMASS 1.34316866236751
    TELEHA +01 10 19.65
    MOUNT Paramount ME II
    TELTKRA 15.0304039
    TELTKDEC 0.2501889
    OBJCTRA 04 58 42.693
    OBJCTDEC -05 33 01.61
    OBJECT GALAXY 23 (TELSTAR 13) #27854U
    INSTRUME FLI Camera Plugin 2.0
    XPIXSZ 9.0
    YPIXSZ 9.0
    READOUTM 8 MHz
    CDS 8 MHz
    FILTER Slot 0/Slot 0
    DATE-OBS 2023-12-28T06:46:25.286
    LOCALTIM 12/27/2023 11:46:25.289 PM STD
    HRZOSCAN 0
    VRTOSCAN 0
    XORG_VIS 0
    YORG_VIS 0
    WID_VIS 4096
    HT_VIS 4096
    RBIFLOOD 0
    RBIFLUSH 0
    RBI_BIN 0
    EXT_TEMP 0.9375




.. GENERATED FROM PYTHON SOURCE LINES 39-40

Let's synthesize a CCD image for the same observation conditions

.. GENERATED FROM PYTHON SOURCE LINES 40-52

.. code-block:: default


    # pl = pv.Plotter()
    # mrv.render_observation_scenario(
    #     pl,
    #     dates=obs_dates,
    #     station=observing_station,
    #     look_dirs_eci=obs_dirs_eci,
    #     sensor_extent_km=20e3,
    # )
    # pl.show()
    # endd








.. GENERATED FROM PYTHON SOURCE LINES 53-54

Synthesizing the same image

.. GENERATED FROM PYTHON SOURCE LINES 56-57

Let's synthesize a CCD image for the same observation conditions

.. GENERATED FROM PYTHON SOURCE LINES 57-102

.. code-block:: default


    observing_station.telescope.fwhm = 4

    obj = mr.SpaceObject("matlib_hylas4.obj", identifier=26853)
    r_obj_eci = obj.propagate(obs_dates)

    sv = mr.sun(obs_dates)
    nadir = -mr.hat(r_obj_eci)
    attitude = mr.AlignedAndConstrainedAttitude(
        v_align=nadir,
        v_const=sv,
        dates=obs_dates,
        axis_order=(1, 2, 0),
    )
    obj_lc_sampler, _ = observing_station.observe_light_curve(
        obj,
        attitude,
        mr.Brdf("phong"),
        obs_dates,
        use_engine=True,
        instances=1,
        model_scale_factor=1,
        rotate_panels=True,
    )
    lc_adu = obj_lc_sampler()
    print(lc_adu)
    lc_adu = 1e6 * np.ones(lc_adu.shape)

    catalog = mr.StarCatalog("gaia", observing_station, obs_dates[0])

    mr.tic()
    adu_grid_streaked_sampled = observing_station.telescope.ccd.generate_ccd_image(
        obs_dates,
        observing_station,
        obs_dirs_eci,
        lc_adu,
        catalog,
        hot_pixel_probability=0,
        dead_pixel_probability=0,
        add_parabola=False,
        scintillation=False,
    )
    mr.toc()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    WARNING: no observation constraints assigned!
    [256758.11126289697 257948.68256113274]
    Objects in frame 1:
    GALAXY 31
    GALAXY 23 (TELSTAR 13)
    Objects in frame 2:
    GALAXY 31
    GALAXY 23 (TELSTAR 13)
    Elapsed time: 4.82e+00 seconds




.. GENERATED FROM PYTHON SOURCE LINES 103-104

Let's take a look at the real and synthetic CCD images

.. GENERATED FROM PYTHON SOURCE LINES 104-129

.. code-block:: default


    ccd_adu = np.clip(ccd_adu - br_parabola_obs, 1, np.inf)
    adu_grid_streaked_sampled = np.clip(
        adu_grid_streaked_sampled - mr.image_background_parabola(adu_grid_streaked_sampled),
        1,
        np.inf,
    )


    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.imshow(np.log10(ccd_adu), cmap="gray")
    mrv.texit(f"POGS CCD", "", "", grid=False)
    plt.colorbar(cax=mrv.get_cbar_ax(), label="$\log_{10}(ADU)$")
    plt.clim(*np.percentile(np.log10(ccd_adu), [0.1, 99.9]))

    plt.subplot(1, 2, 2)
    plt.imshow(np.log10(adu_grid_streaked_sampled), cmap="gray")
    mrv.texit(f"Synthetic CCD", "", "", grid=False)
    plt.colorbar(cax=mrv.get_cbar_ax(), label="$\log_{10}(ADU)$")
    plt.clim(*np.percentile(np.log10(adu_grid_streaked_sampled), [0.1, 99.9]))
    plt.tight_layout()
    plt.show()





.. image-sg:: /gallery/10-ccd/images/sphx_glr_render_ccd_001.png
   :alt: POGS CCD, Synthetic CCD
   :srcset: /gallery/10-ccd/images/sphx_glr_render_ccd_001.png, /gallery/10-ccd/images/sphx_glr_render_ccd_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 130-131

Looking at the residual noise after subtracting off the parabolic background from the real image

.. GENERATED FROM PYTHON SOURCE LINES 131-146

.. code-block:: default


    ccd_adu_minus_br = observing_station.telescope.ccd.subtract_parabola(ccd_adu)
    real_br_mask = mr.image_background_naive(ccd_adu_minus_br)[0]
    real_br_pixels = np.ma.array(ccd_adu_minus_br, mask=~real_br_mask)
    synth_adu_minus_br = observing_station.telescope.ccd.subtract_parabola(
        adu_grid_streaked_sampled
    )
    synth_br_mask = mr.image_background_naive(synth_adu_minus_br)[0]
    synth_br_pixels = np.ma.array(synth_adu_minus_br, mask=~synth_br_mask)
    print(f"Real background variance: {np.var(ccd_adu_minus_br[real_br_mask])} [ADU^2]")
    print(
        f"Synthetic background variance: {np.var(synth_adu_minus_br[synth_br_mask])} [ADU^2]"
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Real background variance: 90.29777921909367 [ADU^2]
    Synthetic background variance: 257.0076380609039 [ADU^2]




.. GENERATED FROM PYTHON SOURCE LINES 147-148

Plotting the same, with the parabolic background subtracted from the real image

.. GENERATED FROM PYTHON SOURCE LINES 148-165

.. code-block:: default


    cbar_kwargs = dict(label="$ADU$")
    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.imshow(real_br_pixels, cmap="plasma")
    mrv.texit(f"POGS CCD Background Pixels", "", "", grid=False)
    plt.colorbar(cax=mrv.get_cbar_ax(), **cbar_kwargs)
    plt.clim(0, 300)

    plt.subplot(1, 2, 2)
    plt.imshow(synth_br_pixels, cmap="plasma")
    mrv.texit(f"Synthetic CCD Background Pixels", "", "", grid=False)
    plt.colorbar(cax=mrv.get_cbar_ax(), **cbar_kwargs)
    plt.clim(0, 300)
    plt.tight_layout()
    plt.show()




.. image-sg:: /gallery/10-ccd/images/sphx_glr_render_ccd_002.png
   :alt: POGS CCD Background Pixels, Synthetic CCD Background Pixels
   :srcset: /gallery/10-ccd/images/sphx_glr_render_ccd_002.png, /gallery/10-ccd/images/sphx_glr_render_ccd_002_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 166-167

Inspecting the backgrounds

.. GENERATED FROM PYTHON SOURCE LINES 167-203

.. code-block:: default


    frac_cuts = (1e-4, 5e-3)
    thresh = slice(
        int(frac_cuts[0] * adu_grid_streaked_sampled.size),
        int((1 - frac_cuts[1]) * adu_grid_streaked_sampled.size),
    )
    synth_br_data = np.sort(adu_grid_streaked_sampled.flatten())[thresh][::100]
    real_br_data = np.sort(ccd_adu.flatten())[thresh][::100]

    synth_br = np.mean(synth_br_data)
    real_br = np.mean(real_br_data)

    print(f"Synthetic background: {synth_br} [ADU]")
    print(f"Real background: {real_br} [ADU]")

    synth_br_poisson_samples = np.random.poisson(synth_br, synth_br_data.size)
    real_br_poisson_samples = np.random.poisson(real_br, real_br_data.size)

    plt.subplot(1, 2, 2)
    bins = np.arange(np.min(synth_br_data), np.max(synth_br_data))
    hist_args = dict(density=True, bins=bins, alpha=0.7)
    plt.hist(synth_br_data, **hist_args)
    plt.hist(synth_br_poisson_samples, **hist_args)
    mrv.texit("Synthetic backgrounds", "ADU", "Density", ["Image", "Poisson fit"])

    plt.subplot(1, 2, 1)
    hist_args["bins"] = np.arange(
        np.min(real_br_poisson_samples), np.max(real_br_poisson_samples)
    )
    plt.hist(real_br_data, **hist_args)
    plt.hist(real_br_poisson_samples, **hist_args)
    mrv.texit("Real backgrounds", "ADU", "Density", ["Image", "Poisson fit"])

    plt.tight_layout()
    plt.gcf().set_size_inches(8, 4)
    plt.show()



.. image-sg:: /gallery/10-ccd/images/sphx_glr_render_ccd_003.png
   :alt: Synthetic backgrounds, Real backgrounds
   :srcset: /gallery/10-ccd/images/sphx_glr_render_ccd_003.png, /gallery/10-ccd/images/sphx_glr_render_ccd_003_2_00x.png 2.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Synthetic background: 9.160533536222836 [ADU]
    Real background: 5.735410984639813 [ADU]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.905 seconds)


.. _sphx_glr_download_gallery_10-ccd_render_ccd.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: render_ccd.py <render_ccd.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: render_ccd.ipynb <render_ccd.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
