
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/10-ccd/render_ccd.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_10-ccd_render_ccd.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_10-ccd_render_ccd.py:


CCD Rendering
=============

Renders a synthetic CCD image of an observation taken by the POGS telescope

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: default


    import datetime
    import os

    import matplotlib.pyplot as plt
    import numpy as np







.. GENERATED FROM PYTHON SOURCE LINES 14-15

Loading a fits image from the Purdue Optical Ground Station

.. GENERATED FROM PYTHON SOURCE LINES 15-85

.. code-block:: default

    from astropy.io import fits

    import mirage as mr
    import mirage.vis as mrv

    ccd_dir = os.path.join(os.environ["SRCDIR"], "..", "data")
    ccd_path = os.path.join(ccd_dir, "00130398.fit")
    # ccd_path = os.path.join(os.environ["SRCDIR"], "..", "examples/10-ccd/00095337.fit")

    with fits.open(ccd_path) as hdul:
        header = hdul[0].header
        for key in header.keys():
            print(key, header[key])

        date_obs_initial = datetime.datetime.strptime(
            header["DATE-OBS"], "%Y-%m-%dT%H:%M:%S.%f"
        ).replace(tzinfo=datetime.timezone.utc)
        ccd_temp = header["SET-TEMP"]
        site_lat_geod_deg = header["OBSGEO-B"]
        site_lon_deg = header["OBSGEO-L"]
        site_alt_m = header["OBSGEO-H"]
        center_azimuth_rad = np.deg2rad(header["CENTAZ"])
        center_elevation_rad = np.deg2rad(header["CENTALT"])
        airmass = header["AIRMASS"]
        track_rate_rad_ra = mr.dms_to_rad(0, 0, header["TELTKRA"])  # rad/s
        track_rate_rad_dec = mr.dms_to_rad(0, 0, header["TELTKDEC"])  # rad/s
        obj_ra_rad_initial = mr.hms_to_rad(
            *[float(x) for x in header["OBJCTRA"].split(" ")]
        )
        obj_dec_rad_initial = mr.dms_to_rad(
            *[float(x) for x in header["OBJCTDEC"].split(" ")]
        )
        lst_deg_initial = np.rad2deg(
            mr.hms_to_rad(*[float(x) for x in header["LST"].split(" ")])
        )
        integration_time_seconds = header["EXPTIME"]
        ccd_adu = hdul[0].data

    date_obs_final = date_obs_initial + mr.seconds(integration_time_seconds)

    observing_station = mr.Station(
        lat_deg=site_lat_geod_deg, lon_deg=site_lon_deg, alt_km=site_alt_m / 1e3
    )

    station_eci_initial = observing_station.j2000_at_dates(date_obs_initial)
    station_eci_final = observing_station.j2000_at_dates(date_obs_final)

    obj_ra_rad_final = obj_ra_rad_initial + integration_time_seconds * track_rate_rad_ra
    obj_dec_rad_final = obj_dec_rad_initial + integration_time_seconds * track_rate_rad_dec

    obj_look_eci_initial = mr.ra_dec_to_eci(obj_ra_rad_initial, obj_dec_rad_initial)
    obj_look_eci_final = mr.ra_dec_to_eci(obj_ra_rad_final, obj_dec_rad_final)

    eci_from_az_el = observing_station.az_el_to_eci(
        center_azimuth_rad, center_elevation_rad, date_obs_initial
    )
    ra_dec_from_eci_from_az_el = mr.eci_to_ra_dec(eci_from_az_el)

    obs_dates = np.array([date_obs_initial, date_obs_final])
    obs_dirs_eci = np.vstack((obj_look_eci_initial, obj_look_eci_final))

    import pyvista as pv

    # pl = pv.Plotter()
    # mrv.render_observation_scenario(pl, dates=obs_dates,
    #                             station=observing_station,
    #                             look_dirs_eci=obs_dirs_eci,
    #                             sensor_extent_km=20e3)
    # pl.show()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    SIMPLE True
    BITPIX 16
    NAXIS 2
    NAXIS1 4096
    NAXIS2 4096
    EXTEND True
    COMMENT   FITS (Flexible Image Transport System) format is defined in 'Astronomy
      and Astrophysics', volume 376, page 359; bibcode: 2001A&A...376..359H
    COMMENT   FITS (Flexible Image Transport System) format is defined in 'Astronomy
      and Astrophysics', volume 376, page 359; bibcode: 2001A&A...376..359H
    BZERO 32768
    BSCALE 1
    SBUUID {2ba05d32-d73c-4a24-b8a9-1649ecec1cf2}
    EXPTIME 10.0
    SWCREATE TheSkyX Version 10.5.0 Build 12304
    COLORCCD 0
    DISPINCR 1
    PICTTYPE 1
    IMAGETYP Light Frame
    XORGSUBF 0
    YORGSUBF 0
    XBINNING 1
    YBINNING 1
    CCD-TEMP -20.0
    SET-TEMP -20.0
    SITELAT +32 54 00.00
    SITELONG +105 32 00.00
    LST +16 05 55.78
    OBSGEO-B 32.9
    OBSGEO-L -105.5333333333
    OBSGEO-H 2225.0
    BTP 1
    CENTAZ 145.524680253994
    CENTALT 45.9167875226687
    AIRMASS 1.39209957097551
    TELEHA -01 33 10.67
    MOUNT Paramount ME II
    TELTKRA 15.0334524
    TELTKDEC -0.0113161
    OBJCTRA 17 37 58.886
    OBJCTDEC -05 13 41.77
    INSTRUME FLI Camera Plugin 2.0
    XPIXSZ 9.0
    YPIXSZ 9.0
    READOUTM 8 MHz
    CDS 8 MHz
    FILTER Slot 0/Slot 0
    DATE-OBS 2021-04-13T09:40:52.381
    LOCALTIM 4/13/2021 03:40:52.380 AM DST
    HRZOSCAN 0
    VRTOSCAN 0
    XORG_VIS 0
    YORG_VIS 0
    WID_VIS 4096
    HT_VIS 4096
    RBIFLOOD 0
    RBIFLUSH 0
    RBI_BIN 0
    EXT_TEMP 7.4375




.. GENERATED FROM PYTHON SOURCE LINES 86-87

Synthesizing the same image

.. GENERATED FROM PYTHON SOURCE LINES 89-90

Let's synthesize a CCD image for the same observation conditions

.. GENERATED FROM PYTHON SOURCE LINES 90-128

.. code-block:: default


    observing_station.telescope.fwhm = 2

    obj = mr.SpaceObject("matlib_hylas4.obj", identifier=26853)
    r_obj_eci = obj.propagate(obs_dates)

    sv = mr.sun(obs_dates)
    nadir = -mr.hat(r_obj_eci)
    attitude = mr.AlignedAndConstrainedAttitude(
        v_align=nadir,
        v_const=sv,
        dates=obs_dates,
        axis_order=(1, 2, 0),
    )
    obj_lc_sampler, _ = observing_station.observe_light_curve(
        obj,
        attitude,
        mr.Brdf("phong"),
        obs_dates,
        use_engine=True,
        instances=1,
        model_scale_factor=1,
        rotate_panels=True,
    )
    lc_adu = obj_lc_sampler()

    mr.tic()
    adu_grid_streaked_sampled = observing_station.telescope.ccd.generate_ccd_image(
        obs_dates,
        observing_station,
        obs_dirs_eci,
        lc_adu,
        hot_pixel_probability=0,
        dead_pixel_probability=0,
    )
    mr.toc()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    WARNING: no observation constraints assigned!
    Elapsed time: 7.38e+00 seconds




.. GENERATED FROM PYTHON SOURCE LINES 129-130

Let's take a look at the real and synthetic CCD images

.. GENERATED FROM PYTHON SOURCE LINES 130-146

.. code-block:: default


    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.imshow(np.log10(ccd_adu), cmap="gist_stern")
    mrv.texit(f"POGS CCD", "", "", grid=False)
    plt.colorbar(cax=mrv.get_cbar_ax(), label="$\log_{10}(ADU)$")
    plt.clim(3, 4)

    plt.subplot(1, 2, 2)
    plt.imshow(np.log10(adu_grid_streaked_sampled), cmap="gist_stern")
    mrv.texit(f"Synthetic CCD", "", "", grid=False)
    plt.colorbar(cax=mrv.get_cbar_ax(), label="$\log_{10}(ADU)$")
    plt.clim(3, 4)
    plt.tight_layout()
    plt.show()




.. image-sg:: /gallery/10-ccd/images/sphx_glr_render_ccd_001.png
   :alt: POGS CCD, Synthetic CCD
   :srcset: /gallery/10-ccd/images/sphx_glr_render_ccd_001.png, /gallery/10-ccd/images/sphx_glr_render_ccd_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 147-148

Looking at the residual noise after subtracting off the parabolic background from the real image

.. GENERATED FROM PYTHON SOURCE LINES 148-163

.. code-block:: default


    ccd_adu_minus_br = observing_station.telescope.ccd.subtract_parabola(ccd_adu)
    real_br_mask = mr.image_background_naive(ccd_adu_minus_br)[0]
    real_br_pixels = np.ma.array(ccd_adu_minus_br, mask=~real_br_mask)
    synth_adu_minus_br = observing_station.telescope.ccd.subtract_parabola(
        adu_grid_streaked_sampled
    )
    synth_br_mask = mr.image_background_naive(synth_adu_minus_br)[0]
    synth_br_pixels = np.ma.array(synth_adu_minus_br, mask=~synth_br_mask)
    print(f"Real background variance: {np.var(ccd_adu_minus_br[real_br_mask])} [ADU^2]")
    print(
        f"Synthetic background variance: {np.var(synth_adu_minus_br[synth_br_mask])} [ADU^2]"
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Real background variance: 140.57814171306444 [ADU^2]
    Synthetic background variance: 188.03839764034615 [ADU^2]




.. GENERATED FROM PYTHON SOURCE LINES 164-165

Plotting the same, with the parabolic background subtracted from the real image

.. GENERATED FROM PYTHON SOURCE LINES 165-182

.. code-block:: default


    cbar_kwargs = dict(label="$ADU$")
    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.imshow(real_br_pixels, cmap="plasma")
    mrv.texit(f"POGS CCD Background Pixels", "", "", grid=False)
    plt.colorbar(cax=mrv.get_cbar_ax(), **cbar_kwargs)
    plt.clim(0, 300)

    plt.subplot(1, 2, 2)
    plt.imshow(synth_br_pixels, cmap="plasma")
    mrv.texit(f"Synthetic CCD Background Pixels", "", "", grid=False)
    plt.colorbar(cax=mrv.get_cbar_ax(), **cbar_kwargs)
    plt.clim(0, 300)
    plt.tight_layout()
    plt.show()




.. image-sg:: /gallery/10-ccd/images/sphx_glr_render_ccd_002.png
   :alt: POGS CCD Background Pixels, Synthetic CCD Background Pixels
   :srcset: /gallery/10-ccd/images/sphx_glr_render_ccd_002.png, /gallery/10-ccd/images/sphx_glr_render_ccd_002_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 183-184

Inspecting the backgrounds

.. GENERATED FROM PYTHON SOURCE LINES 184-220

.. code-block:: default


    frac_cuts = (1e-4, 5e-3)
    thresh = slice(
        int(frac_cuts[0] * adu_grid_streaked_sampled.size),
        int((1 - frac_cuts[1]) * adu_grid_streaked_sampled.size),
    )
    synth_br_data = np.sort(adu_grid_streaked_sampled.flatten())[thresh][::100]
    real_br_data = np.sort(ccd_adu.flatten())[thresh][::100]

    synth_br = np.mean(synth_br_data)
    real_br = np.mean(real_br_data)

    print(f"Synthetic background: {synth_br} [ADU]")
    print(f"Real background: {real_br} [ADU]")

    synth_br_poisson_samples = np.random.poisson(synth_br, synth_br_data.size)
    real_br_poisson_samples = np.random.poisson(real_br, real_br_data.size)

    plt.subplot(1, 2, 2)
    bins = np.arange(np.min(synth_br_data), np.max(synth_br_data))
    hist_args = dict(density=True, bins=bins, alpha=0.7)
    plt.hist(synth_br_data, **hist_args)
    plt.hist(synth_br_poisson_samples, **hist_args)
    mrv.texit("Synthetic backgrounds", "ADU", "Density", ["Image", "Poisson fit"])

    plt.subplot(1, 2, 1)
    hist_args["bins"] = np.arange(
        np.min(real_br_poisson_samples), np.max(real_br_poisson_samples)
    )
    plt.hist(real_br_data, **hist_args)
    plt.hist(real_br_poisson_samples, **hist_args)
    mrv.texit("Real backgrounds", "ADU", "Density", ["Image", "Poisson fit"])

    plt.tight_layout()
    plt.gcf().set_size_inches(8, 4)
    plt.show()



.. image-sg:: /gallery/10-ccd/images/sphx_glr_render_ccd_003.png
   :alt: Synthetic backgrounds, Real backgrounds
   :srcset: /gallery/10-ccd/images/sphx_glr_render_ccd_003.png, /gallery/10-ccd/images/sphx_glr_render_ccd_003_2_00x.png 2.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Synthetic background: 1023.4615776142372 [ADU]
    Real background: 1024.5820034850508 [ADU]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.872 seconds)


.. _sphx_glr_download_gallery_10-ccd_render_ccd.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: render_ccd.py <render_ccd.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: render_ccd.ipynb <render_ccd.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
