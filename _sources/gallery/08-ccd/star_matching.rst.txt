
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/08-ccd/star_matching.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_08-ccd_star_matching.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_08-ccd_star_matching.py:


Star Matching
=============

Given star centroid locations and an initial estimate of the look direction and tracking rate, fit the catalog

.. GENERATED FROM PYTHON SOURCE LINES 7-101

.. code-block:: Python


    import os

    import matplotlib.pyplot as plt
    import numpy as np
    from scipy.spatial import KDTree

    import mirage as mr


    def expected_star_centroids_in_fits(
        catalog: mr.StarCatalog,
        look_dir_eci_app: np.ndarray,
        up_dir_eci_app: np.ndarray,
        limiting_magnitude: float = 15.0,
        add_distortion: bool = True,
    ) -> np.ndarray:

        uvs_in_frame, vm_in_frame = catalog.in_fov(
            look_dir_eci_app, up_dir_eci_app, limiting_magnitude=limiting_magnitude
        )
        star_xs, star_ys = station.telescope.j2000_unit_vectors_to_pixels(
            look_dir_eci_app, up_dir_eci_app, uvs_in_frame, add_distortion=add_distortion
        )
        return np.vstack((star_xs.flatten(), star_ys.flatten(), vm_in_frame.flatten())).T


    info_path = "/Users/liamrobinson/Library/CloudStorage/OneDrive-purdue.edu/2022-09-18_GPS_PRN14/ObservationData.mat"
    img_ind = 299
    add_distortion = True
    limiting_magnitude = 15.0
    station = mr.Station()
    data_mat = mr.load_obs_data(station, info_path, img_ind)
    date_mid = data_mat["date_mid"]
    mr.tic("Loading star catalog")
    catalog = mr.StarCatalog("gaia", station, date_mid, aberration=True)
    mr.toc()

    obs_look_dir_from_az_el = station.az_el_to_eci(
        data_mat["az_rad"], data_mat["el_rad_true"], date_mid
    )
    el_app = mr.apparent_refacted_elevation(
        data_mat["pressure_pa"] / 100, data_mat["temp_k"], data_mat["el_rad_true"]
    )
    obs_look_dir_from_az_el_app = station.az_el_to_eci(data_mat["az_rad"], el_app, date_mid)
    angle_rot = mr.angle_between_vecs(obs_look_dir_from_az_el, obs_look_dir_from_az_el_app)
    axis_rot = mr.hat(np.cross(obs_look_dir_from_az_el, obs_look_dir_from_az_el_app))
    dcm_app_to_true = mr.rv_to_dcm(axis_rot * angle_rot)

    fits_path = os.path.join(os.path.split(info_path)[0], data_mat["fits_file"])
    fits_info = mr.info_from_fits(fits_path)

    look_dir_eci = data_mat["look_dir_eci_processed"]
    look_dir_eci_app = dcm_app_to_true @ look_dir_eci

    scope_up_dir_eci = data_mat["up_dir_eci_processed"]
    scope_up_dir_eci_app = dcm_app_to_true @ scope_up_dir_eci

    sms_names = data_mat["_obs_mat"]["saveMatchedStars"][0][img_ind].dtype.names
    sms = dict(zip(sms_names, data_mat["_obs_mat"]["saveMatchedStars"][0][img_ind]))
    sms = {k: np.squeeze(v) for k, v in sms.items()}
    print(sms.keys())
    stars_found = np.vstack((4096 - sms["x0"], 4096 - sms["y0"], sms["Gmag"])).T

    # print(stars_found.shape)
    # endd
    matched_gmag = catalog._mags[sms["idx_catMatched"] - 1]
    matched_irrad = mr.apparent_magnitude_to_irradiance(matched_gmag)
    matched_brightness = sms["brightness"]
    coefs = np.polyfit(matched_irrad, matched_brightness, 1)
    coefs = [coefs[0], 0]
    sint = lambda irrad: np.polyval(coefs, irrad) / fits_info["integration_time"] / irrad

    plt.figure()
    plt.scatter(matched_irrad, matched_brightness)
    plt.plot(matched_irrad, np.polyval(coefs, matched_irrad), c="r")
    plt.xlabel("Irradiance [W/m^2]")
    plt.ylabel("ADU")
    # plt.show()
    # enddd

    img = fits_info["ccd_adu"]
    img = np.fliplr(np.flipud(img))

    tele = station.telescope

    stars_expected = expected_star_centroids_in_fits(
        catalog,
        look_dir_eci_app,
        scope_up_dir_eci_app,
        limiting_magnitude=limiting_magnitude,
        add_distortion=add_distortion,
    )




.. image-sg:: /gallery/08-ccd/images/sphx_glr_star_matching_001.png
   :alt: star matching
   :srcset: /gallery/08-ccd/images/sphx_glr_star_matching_001.png, /gallery/08-ccd/images/sphx_glr_star_matching_001_2_00x.png 2.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading star catalog: 6.52e+00 seconds
    dict_keys(['TYC1', 'TYC2', 'TYC3', 'Gaia_ID', 'Gmag', 'Vmag', 'catalog_ra_ICRS_J2016', 'catalog_dec_ICRS_J2016', 'catalog_ra_GCRS', 'catalog_dec_GCRS', 'catalog_ra_apparent', 'catalog_dec_apparent', 'catalog_imgFrame', 'catalog_x0', 'catalog_y0', 'observed_ra_apparent', 'observed_dec_apparent', 'observed_az_apparent', 'observed_el_apparent', 'observed_ra_true', 'observed_dec_true', 'observed_az_true', 'observed_el_true', 'x0', 'y0', 'phi', 'Length', 'endpoints_x', 'endpoints_y', 'brightness', 'JD', 'SNR', 'idx_body', 'idx_ref', 'idx_catMatched', 'angle_errors_arcsec'])




.. GENERATED FROM PYTHON SOURCE LINES 102-103

We're close, but we need to solve for the slight rotation and translation between the two images

.. GENERATED FROM PYTHON SOURCE LINES 103-159

.. code-block:: Python


    # building a tree for the expected stars
    tree = KDTree(stars_expected[:, :2])

    # finding the nearest neighbor for each found star
    expected_to_found_dist, nearest = tree.query(stars_found[:, :2])
    nearest_expected_centroid = stars_expected[nearest, :2]
    # only use lowest 25% dist pairs to avoid outliers
    use_inds = np.argsort(expected_to_found_dist.flatten())[
        : expected_to_found_dist.size // 4
    ]

    nearest_expected_uvs = tele.pixels_to_j2000_unit_vectors(
        look_dir_eci_app,
        scope_up_dir_eci_app,
        nearest_expected_centroid[use_inds],
        input_is_distorted=add_distortion,
    )
    stars_found_uvs = tele.pixels_to_j2000_unit_vectors(
        look_dir_eci_app,
        scope_up_dir_eci_app,
        stars_found[use_inds, :2],
        input_is_distorted=add_distortion,
    )

    print(nearest_expected_centroid[use_inds] - stars_found[use_inds, :2])

    q_davenport = mr.davenport(nearest_expected_uvs, stars_found_uvs)
    print(mr.wrap_to_pi(mr.vecnorm(mr.quat_to_rv(q_davenport))) * 180 / np.pi)

    A_davenport = mr.quat_to_dcm(q_davenport)

    look_dir_app_true = A_davenport @ look_dir_eci_app
    up_dir_app_true = A_davenport @ scope_up_dir_eci_app

    erc = expected_star_centroids_in_fits(
        catalog,
        look_dir_app_true,
        up_dir_app_true,
        limiting_magnitude=limiting_magnitude,
        add_distortion=add_distortion,
    )

    img_prepared = mr.prepare_fits_for_plotting(img, background_method="parabola")
    plt.figure()
    plt.imshow(img_prepared, cmap="gray")
    plt.scatter(
        erc[:, 0],
        erc[:, 1],
        c="y",
        marker="+",
        s=20,
    )
    plt.scatter(stars_found[:, 0], stars_found[:, 1], c="m", marker="o", s=10)





.. image-sg:: /gallery/08-ccd/images/sphx_glr_star_matching_002.png
   :alt: star matching
   :srcset: /gallery/08-ccd/images/sphx_glr_star_matching_002.png, /gallery/08-ccd/images/sphx_glr_star_matching_002_2_00x.png 2.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[  4.09962529  -6.62921664]
     [  8.7455041   -4.66456677]
     [ -8.90256346  -7.47430558]
     [  2.65058808 -11.46411275]
     [  2.01988109  13.73990143]
     [ -3.86128496 -14.98453861]
     [ 14.89775379   8.34650945]
     [  0.38672114 -17.16440693]
     [-13.2698188   12.95095172]
     [ 18.45956845  -3.04503807]
     [  8.4345174   20.3281701 ]
     [-22.94681606   3.65207241]
     [ 10.77661988 -20.91403286]
     [ 25.08287268  -1.50349717]
     [-15.00329806 -20.26061481]
     [ 12.8586806   21.84560064]
     [-20.5749     -16.41753562]
     [-21.75981101 -14.91634754]
     [-15.71158824 -21.24271513]
     [-21.58752815 -15.30460209]
     [-17.179205   -20.12865468]
     [-21.09114363 -16.05726849]
     [-22.09182778 -14.74845847]
     [-17.88591982 -19.81588828]
     [-21.91394595 -15.51587467]
     [-21.71571357 -15.93516642]
     [-22.47111904 -14.86099936]
     [-22.66213892 -14.60396253]
     [-21.94659718 -15.70772272]
     [-22.89509048 -14.30996776]
     [-19.4556788  -18.76769888]
     [-22.95936978 -14.27791219]
     [-23.0169597  -14.20667698]
     [-22.00142334 -15.74727581]
     [-23.33198737 -13.72093561]
     [-22.85396542 -14.50571544]
     [-22.92098281 -14.40665687]
     [-22.4262527  -15.19937785]
     [-23.3482535  -13.76469663]
     [ -6.45023533 -26.34478018]
     [-23.33509956 -13.82589084]
     [-22.59092613 -15.06335611]
     [-23.74717721 -13.1695243 ]
     [-23.20732119 -14.12511402]
     [-23.84001946 -13.07119271]
     [-23.49904881 -13.67738323]
     [-23.54386063 -13.72167532]]
    [[-0.04395724]]

    <matplotlib.collections.PathCollection object at 0x371057c10>



.. GENERATED FROM PYTHON SOURCE LINES 160-161

Generating the synthetic image

.. GENERATED FROM PYTHON SOURCE LINES 161-185

.. code-block:: Python

    station.telescope.fwhm = 4.0
    mr.tic("Synthesizing CCD Image")
    adu_grid_streaked_sampled = station.telescope.ccd.generate_ccd_image(
        date_mid,
        fits_info["integration_time"],
        station,
        look_dir_app_true,
        [fits_info["ra_rate"], fits_info["dec_rate"]],
        1e4,
        catalog,
        up_dir_eci=up_dir_app_true,
        limiting_magnitude=limiting_magnitude,
        add_distortion=add_distortion,
        sint_val=sint,
    )
    mr.toc()

    adu_grid_streaked_sampled_prepared = mr.prepare_fits_for_plotting(
        adu_grid_streaked_sampled, background_method="naive"
    )

    # adu_grid_streaked_sampled = adu_grid_streaked_sampled / 10
    # adu_grid_streaked_sampled += int(1e3)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16 1.13112425e+16 1.13112425e+16
     1.13112425e+16 1.13112425e+16]
    Objects in frame 1:
    NAVSTAR 80 (USA 309)
    Synthesizing CCD Image: 6.19e+00 seconds




.. GENERATED FROM PYTHON SOURCE LINES 186-187

Overlaying the two images

.. GENERATED FROM PYTHON SOURCE LINES 187-211

.. code-block:: Python


    plt.figure()
    plt.imshow(img_prepared, cmap="gray")
    plt.imshow(adu_grid_streaked_sampled_prepared, cmap="gray_r", alpha=0.5)
    plt.scatter(
        erc[:, 0],
        erc[:, 1],
        c="y",
        marker="+",
        s=20,
    )
    plt.scatter(stars_found[:, 0], stars_found[:, 1], c="m", marker="o", s=10)

    plt.figure()
    plt.imshow(img_prepared, cmap="gray")
    plt.colorbar()
    plt.figure()
    plt.imshow(adu_grid_streaked_sampled_prepared, cmap="gray")
    plt.colorbar()
    # plt.figure()
    # plt.imshow(np.log10(np.clip(np.abs(img - adu_grid_streaked_sampled), 1, np.inf)), cmap="coolwarm")
    # plt.colorbar()
    plt.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/08-ccd/images/sphx_glr_star_matching_003.png
         :alt: star matching
         :srcset: /gallery/08-ccd/images/sphx_glr_star_matching_003.png, /gallery/08-ccd/images/sphx_glr_star_matching_003_2_00x.png 2.00x
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/08-ccd/images/sphx_glr_star_matching_004.png
         :alt: star matching
         :srcset: /gallery/08-ccd/images/sphx_glr_star_matching_004.png, /gallery/08-ccd/images/sphx_glr_star_matching_004_2_00x.png 2.00x
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/08-ccd/images/sphx_glr_star_matching_005.png
         :alt: star matching
         :srcset: /gallery/08-ccd/images/sphx_glr_star_matching_005.png, /gallery/08-ccd/images/sphx_glr_star_matching_005_2_00x.png 2.00x
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 212-213

Saving the images to file

.. GENERATED FROM PYTHON SOURCE LINES 213-218

.. code-block:: Python


    import imageio
    from PIL import Image

    imageio.imwrite("observed_log_adu.png", Image.fromarray(img_prepared).convert("L"))
    imageio.imwrite("synthetic_log_adu.png", Image.fromarray(adu_grid_streaked_sampled_prepared).convert("L"))







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.826 seconds)


.. _sphx_glr_download_gallery_08-ccd_star_matching.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: star_matching.ipynb <star_matching.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: star_matching.py <star_matching.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
