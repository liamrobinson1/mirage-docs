
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/08-ccd/synth_image_results.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_08-ccd_synth_image_results.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_08-ccd_synth_image_results.py:


Synthetic Image Results
=======================

Comparison plots for the synthetic and real images

.. GENERATED FROM PYTHON SOURCE LINES 7-63

.. code-block:: Python


    from types import SimpleNamespace
    from typing import Callable

    import matplotlib.pyplot as plt
    import numpy as np

    import mirage as mr
    from digitaltwin import generate_matched_image


    def star_expected_adu(gmag: float, sint: Callable, integration_time_s: float):
        # note that sint has units of ADU / (W / m^2 * s)
        irrad = mr.apparent_magnitude_to_irradiance(gmag)
        return sint * irrad * integration_time_s


    info_path = "/Users/liamrobinson/Library/CloudStorage/OneDrive-purdue.edu/2022-09-18_GPS_PRN14/ObservationData.mat"
    add_distortion = True
    add_refraction = True
    limiting_magnitude = 15.0
    station = mr.Station()
    station.telescope.fwhm = 2.5
    mr.tic("Loading star catalog")
    catalog = mr.StarCatalog("gaia", station, mr.now(), aberration=False)
    mr.toc()

    yaoe = 1000, 800
    xaoe = 250, 490

    res = generate_matched_image(info_path, 200, station, catalog, add_distortion, add_refraction, limiting_magnitude)
    data_mat = res["data_mat"]
    sint_synth = mr.sint(station, np.pi / 2 - data_mat["el_rad_true"])

    n = SimpleNamespace(**res)

    in_aoe = (n.expected_stars_corrected[:,0] > xaoe[0]) & (n.expected_stars_corrected[:,0] < xaoe[1]) & (n.expected_stars_corrected[:,1] > yaoe[1]) & (n.expected_stars_corrected[:,1] < yaoe[0])
    star_aoe = n.expected_stars_corrected[in_aoe,:]
    star_aoe = star_aoe[np.argsort(star_aoe[:,-2]), :]
    gmag_aoe = star_aoe[0,-2]
    irrad_aoe = mr.apparent_magnitude_to_irradiance(gmag_aoe)
    print(n.fit_adu_of_irrad(irrad_aoe))
    print(np.min(n.img))

    img_sym_prepared = np.log10(n.img_sym)

    plt.figure()
    plt.scatter(n.matched_irrad, n.matched_adu, s=5)
    plt.plot(n.matched_irrad, n.fit_adu_of_irrad(n.matched_irrad), c="r", markersize=7)
    plt.xlabel("Irradiance [W/m^2]")
    plt.ylabel("ADU")
    plt.grid()
    plt.xscale("log")
    plt.yscale("log")
    plt.legend(["Data", "Best linear fit"])




.. image-sg:: /gallery/08-ccd/images/sphx_glr_synth_image_results_001.png
   :alt: synth image results
   :srcset: /gallery/08-ccd/images/sphx_glr_synth_image_results_001.png, /gallery/08-ccd/images/sphx_glr_synth_image_results_001_2_00x.png 2.00x
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Loading star catalog: 2.13e+00 seconds
    Applying 1.14e-02 deg of refraction
    BEFORE QUEST: median error 84.73 pixels
    Performing the QUEST fit with 158 stars
    Applying a 0.02 degree rotation to the telescope orientation
    AFTER QUEST: median error 1.21 pixels
    Objects in frame 1:
    NAVSTAR 80 (USA 309)
    Synthesizing CCD Image: 1.22e+00 seconds
    2174352.371275218
    965

    <matplotlib.legend.Legend object at 0x34d91e8d0>



.. GENERATED FROM PYTHON SOURCE LINES 64-65

Overlaying the two images

.. GENERATED FROM PYTHON SOURCE LINES 65-131

.. code-block:: Python


    n.img = n.img.astype(int)
    n.img[n.img <= 999] = 1000
    n.img -= int(999)

    # n.img_sym = n.img_sym.astype(float)
    # n.img = n.img.astype(float)
    # n.img_sym -= mr.image_background_parabola(n.img_sym)
    # n.img -= mr.image_background_parabola(n.img)

    print(n.img_sym[yaoe[1]:yaoe[0], xaoe[0]:xaoe[1]].sum())
    print(n.img[yaoe[1]:yaoe[0], xaoe[0]:xaoe[1]].sum())
    # endd

    img_prepared = np.log10(n.img)

    plt.figure()
    plt.scatter(n.err_updated[:, 0], n.err_updated[:, 1], s=5)
    plt.yscale("symlog")
    plt.xscale("symlog")
    t = np.linspace(0, 2 * np.pi + 0.1, 1000)
    plt.plot(5 * np.cos(t), 5 * np.sin(t), c="k")
    plt.plot(1 * np.cos(t), 1 * np.sin(t), c="r")
    plt.legend(
        ["Centroid errors", "5-pixel boundary", "1-pixel boundary"], loc="upper right"
    )
    plt.ylim(-100, 100)
    plt.xlim(-100, 100)
    plt.xlabel("$x$ pixel error")
    plt.ylabel("$y$ pixel error")
    plt.grid()


    plt.figure()
    plt.imshow(img_prepared, cmap="gray")
    plt.imshow(img_sym_prepared, cmap="gray_r", alpha=0.5)
    plt.scatter(
        n.expected_stars_corrected[:, 0],
        n.expected_stars_corrected[:, 1],
        c="y",
        marker="+",
        s=20,
        label="Expected centroids",
    )
    plt.scatter(
        n.stars_found[:, 0],
        n.stars_found[:, 1],
        c="m",
        marker="o",
        s=10,
        label="Observed centroids",
    )

    clim_obs = [np.max(img_prepared), np.min(img_prepared)]
    clim_sym = [np.max(img_sym_prepared), np.min(img_sym_prepared)]
    plt.figure()
    plt.imshow(img_prepared, cmap="gray")
    plt.clim(np.min(img_sym_prepared), np.max(img_sym_prepared))
    plt.colorbar(label=r"$\log_{10}\left(\text{ADU}\right)$")
    plt.title("Observed")

    plt.figure()
    plt.imshow(img_sym_prepared, cmap="gray")
    plt.colorbar(label=r"$\log_{10}\left(\text{ADU}\right)$")
    plt.title("Synthetic")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gallery/08-ccd/images/sphx_glr_synth_image_results_002.png
         :alt: synth image results
         :srcset: /gallery/08-ccd/images/sphx_glr_synth_image_results_002.png, /gallery/08-ccd/images/sphx_glr_synth_image_results_002_2_00x.png 2.00x
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/08-ccd/images/sphx_glr_synth_image_results_003.png
         :alt: synth image results
         :srcset: /gallery/08-ccd/images/sphx_glr_synth_image_results_003.png, /gallery/08-ccd/images/sphx_glr_synth_image_results_003_2_00x.png 2.00x
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/08-ccd/images/sphx_glr_synth_image_results_004.png
         :alt: Observed
         :srcset: /gallery/08-ccd/images/sphx_glr_synth_image_results_004.png, /gallery/08-ccd/images/sphx_glr_synth_image_results_004_2_00x.png 2.00x
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gallery/08-ccd/images/sphx_glr_synth_image_results_005.png
         :alt: Synthetic
         :srcset: /gallery/08-ccd/images/sphx_glr_synth_image_results_005.png, /gallery/08-ccd/images/sphx_glr_synth_image_results_005_2_00x.png 2.00x
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2358954.5603832416
    3372972

    Text(0.5, 1.0, 'Synthetic')



.. GENERATED FROM PYTHON SOURCE LINES 132-133

Subtracting the two images

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python

    adu_err = n.img_sym.astype(np.int64) - n.img.astype(np.int64)
    adu_err_stdev = np.abs(adu_err) / np.sqrt(np.abs(n.img.astype(np.int64)))
    plt.figure()
    plt.imshow(adu_err_stdev, cmap="plasma")
    plt.clim(0, 6)
    plt.colorbar(label='ADU error standard deviations')
    plt.xlim(*xaoe)
    plt.ylim(*yaoe)
    plt.show()


.. image-sg:: /gallery/08-ccd/images/sphx_glr_synth_image_results_006.png
   :alt: synth image results
   :srcset: /gallery/08-ccd/images/sphx_glr_synth_image_results_006.png, /gallery/08-ccd/images/sphx_glr_synth_image_results_006_2_00x.png 2.00x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 13.203 seconds)


.. _sphx_glr_download_gallery_08-ccd_synth_image_results.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: synth_image_results.ipynb <synth_image_results.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: synth_image_results.py <synth_image_results.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
