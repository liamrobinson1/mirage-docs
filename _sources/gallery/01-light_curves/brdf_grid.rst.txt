
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/01-light_curves/brdf_grid.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_01-light_curves_brdf_grid.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_01-light_curves_brdf_grid.py:


BRDFs on the local hemisphere
=============================

BRDFs on a hemisphere centered around the surface normal vector

.. GENERATED FROM PYTHON SOURCE LINES 7-14

.. code-block:: default


    import numpy as np
    import pyvista as pv
    import vtk

    import pyspaceaware as ps








.. GENERATED FROM PYTHON SOURCE LINES 15-16

Let's set up grids on the upper hemisphere of a unit sphere to compute the BRDF value at all those unit vectors

.. GENERATED FROM PYTHON SOURCE LINES 16-20

.. code-block:: default

    num = 200
    el_space, az_space = np.linspace(0, np.pi / 2, num), np.linspace(0, 2 * np.pi, num)
    el_grid, az_grid = np.meshgrid(el_space, az_space)








.. GENERATED FROM PYTHON SOURCE LINES 21-22

Now we can iterate through a range of specular exponents and BRDFs to visualize how the BRDF varies

.. GENERATED FROM PYTHON SOURCE LINES 22-65

.. code-block:: default

    pl = pv.Plotter(shape=(2, 2))
    pl.set_background("white")
    for i, n in enumerate([2, 8]):
        for j, name in enumerate(ps.lighting._SUPPORTED_BRDFS):
            brdf = ps.Brdf(name, cd=0.8, cs=0.2, n=n)
            (xx, yy, zz) = ps.sph_to_cart(az_grid, el_grid, 0 * el_grid + 1)
            O = np.hstack(
                (
                    xx.reshape(((num**2, 1))),
                    yy.reshape(((num**2, 1))),
                    zz.reshape(((num**2, 1))),
                )
            )
            L = ps.hat(np.tile(np.array([[0, 1, 1]]), (num**2, 1)))
            N = ps.hat(np.tile(np.array([[0, 0, 1]]), (num**2, 1)))
            b = brdf.eval(L, O, N).reshape(xx.shape)
            mesh = pv.StructuredGrid(xx * b, yy * b, zz * b)
            pl.subplot(i, j)
            pl.add_text(
                f"{name.capitalize()}: ${n=}$", font_size=12, font="arial", color="black"
            )
            pl.add_mesh(mesh, scalars=b.T, show_scalar_bar=False, cmap="isolum")
            ps.plot_basis(pl, np.eye(3), color="gray")
            ps.plot_arrow(
                pl,
                origin=[0, 0, 0],
                direction=L[0, :],
                scale=1,
                color="yellow",
                label="L",
            )
            ps.plot_arrow(
                pl,
                origin=[0, 0, 0],
                direction=N[0, :],
                scale=1,
                color="red",
                label="N",
            )

    pl.link_views()
    pl.view_isometric()
    pl.show()



.. image-sg:: /gallery/01-light_curves/images/sphx_glr_brdf_grid_001.png
   :alt: brdf grid
   :srcset: /gallery/01-light_curves/images/sphx_glr_brdf_grid_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.958 seconds)


.. _sphx_glr_download_gallery_01-light_curves_brdf_grid.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: brdf_grid.py <brdf_grid.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: brdf_grid.ipynb <brdf_grid.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
