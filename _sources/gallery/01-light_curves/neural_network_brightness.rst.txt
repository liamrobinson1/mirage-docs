
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/01-light_curves/neural_network_brightness.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_01-light_curves_neural_network_brightness.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_01-light_curves_neural_network_brightness.py:


Neural Network Brightness
=========================

Trains a neural network to predict the brightness of a specular cube in an arbitrary lighting and observation conditions and compares the results to the truth

.. GENERATED FROM PYTHON SOURCE LINES 7-15

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns

    import mirage as mr
    import mirage.sim as mrsim








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Let's define the object and the BRDF

.. GENERATED FROM PYTHON SOURCE LINES 17-19

.. code-block:: Python

    obj = mr.SpaceObject("cube.obj")
    brdf = mr.Brdf("phong", cd=0.5, cs=0.5, n=10)







.. GENERATED FROM PYTHON SOURCE LINES 20-21

We now define the Multi-Layer Perceptron (MLP) brightness model. Note that the ``layers=(150, 50, 150)`` keyword argument defines the number of neurons in each densely-connected layer.

.. GENERATED FROM PYTHON SOURCE LINES 21-22

.. code-block:: Python

    mlp_bm = mrsim.MLPBrightnessModel(obj, brdf, use_engine=False)







.. GENERATED FROM PYTHON SOURCE LINES 23-24

Now we train the model on a set number of training lighting and observation configurations. Usually ``1e5``-``1e6`` are required for a *good* fit

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: Python

    num_train = int(1e3)
    mlp_bm.train(num_train)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Compute training LC: 2.25e-03 seconds
    Iteration 1, loss = 0.32294188
    Iteration 2, loss = 0.17403078
    Iteration 3, loss = 0.17028022
    Iteration 4, loss = 0.15302931
    Iteration 5, loss = 0.14763961
    Iteration 6, loss = 0.14576953
    Iteration 7, loss = 0.14400668
    Iteration 8, loss = 0.14332724
    Iteration 9, loss = 0.14069349
    Iteration 10, loss = 0.13974488
    Iteration 11, loss = 0.13814234
    Iteration 12, loss = 0.13683439
    Iteration 13, loss = 0.13570504
    Iteration 14, loss = 0.13401588
    Iteration 15, loss = 0.13290582
    Iteration 16, loss = 0.13132450
    Iteration 17, loss = 0.12989136
    Iteration 18, loss = 0.12899890
    Iteration 19, loss = 0.12610850
    Iteration 20, loss = 0.12400272
    Iteration 21, loss = 0.12267310
    Iteration 22, loss = 0.11929955
    Iteration 23, loss = 0.11559992
    Iteration 24, loss = 0.11302612
    Iteration 25, loss = 0.11049237
    Iteration 26, loss = 0.10632918
    Iteration 27, loss = 0.10275280
    Iteration 28, loss = 0.09733309
    Iteration 29, loss = 0.09543589
    Iteration 30, loss = 0.09027977
    Iteration 31, loss = 0.08499181
    Iteration 32, loss = 0.07984038
    Iteration 33, loss = 0.07605104
    Iteration 34, loss = 0.07163556
    Iteration 35, loss = 0.06645477
    Iteration 36, loss = 0.06486467
    Iteration 37, loss = 0.06129936
    Iteration 38, loss = 0.05741027
    Iteration 39, loss = 0.05814328
    Iteration 40, loss = 0.05517989
    Iteration 41, loss = 0.05557554
    Iteration 42, loss = 0.05352404
    Iteration 43, loss = 0.04743526
    Iteration 44, loss = 0.05157916
    Iteration 45, loss = 0.05167769
    Iteration 46, loss = 0.04282454
    Iteration 47, loss = 0.04124791
    Iteration 48, loss = 0.03671157
    Iteration 49, loss = 0.03473698
    Iteration 50, loss = 0.03469224
    Iteration 51, loss = 0.03253813
    Iteration 52, loss = 0.03196959
    Iteration 53, loss = 0.03018169
    Iteration 54, loss = 0.02824668
    Iteration 55, loss = 0.02738510
    Iteration 56, loss = 0.02734893
    Iteration 57, loss = 0.02768282
    Iteration 58, loss = 0.02476053
    Iteration 59, loss = 0.02308806
    Iteration 60, loss = 0.02198433
    Iteration 61, loss = 0.02250447
    Iteration 62, loss = 0.02129830
    Iteration 63, loss = 0.02199622
    Iteration 64, loss = 0.01999441
    Iteration 65, loss = 0.02004923
    Iteration 66, loss = 0.02010216
    Iteration 67, loss = 0.01753116
    Iteration 68, loss = 0.01683537
    Iteration 69, loss = 0.01726180
    Iteration 70, loss = 0.01643804
    Iteration 71, loss = 0.01611844
    Iteration 72, loss = 0.01473842
    Iteration 73, loss = 0.01432012
    Iteration 74, loss = 0.01469241
    Iteration 75, loss = 0.01330786
    Iteration 76, loss = 0.01241490
    Iteration 77, loss = 0.01285045
    Iteration 78, loss = 0.01176729
    Iteration 79, loss = 0.01131667
    Iteration 80, loss = 0.01150712
    Iteration 81, loss = 0.01201325
    Iteration 82, loss = 0.01088858
    Iteration 83, loss = 0.00996768
    Iteration 84, loss = 0.00963414
    Iteration 85, loss = 0.00948576
    Iteration 86, loss = 0.00886421
    Iteration 87, loss = 0.00857752
    Iteration 88, loss = 0.00955182
    Iteration 89, loss = 0.00843302
    Iteration 90, loss = 0.00804058
    Iteration 91, loss = 0.00821824
    Iteration 92, loss = 0.00820053
    Iteration 93, loss = 0.00740766
    Iteration 94, loss = 0.00706618
    Iteration 95, loss = 0.00732098
    Iteration 96, loss = 0.00746234
    Iteration 97, loss = 0.00720646
    Iteration 98, loss = 0.00666865
    Iteration 99, loss = 0.00658802
    Iteration 100, loss = 0.00620936
    Iteration 101, loss = 0.00625493
    Iteration 102, loss = 0.00592271
    Iteration 103, loss = 0.00572290
    Iteration 104, loss = 0.00546278
    Iteration 105, loss = 0.00539168
    Iteration 106, loss = 0.00544668
    Iteration 107, loss = 0.00556116
    Iteration 108, loss = 0.00513621
    Iteration 109, loss = 0.00588350
    Iteration 110, loss = 0.00579204
    Iteration 111, loss = 0.00559797
    Iteration 112, loss = 0.00467705
    Iteration 113, loss = 0.00442338
    Iteration 114, loss = 0.00427057
    Iteration 115, loss = 0.00430317
    Iteration 116, loss = 0.00418163
    Iteration 117, loss = 0.00413079
    Iteration 118, loss = 0.00405489
    Iteration 119, loss = 0.00383027
    Iteration 120, loss = 0.00374080
    Iteration 121, loss = 0.00366929
    Iteration 122, loss = 0.00365206
    Iteration 123, loss = 0.00382310
    Iteration 124, loss = 0.00341900
    Iteration 125, loss = 0.00347444
    Iteration 126, loss = 0.00344940
    Iteration 127, loss = 0.00335821
    Iteration 128, loss = 0.00355869
    Iteration 129, loss = 0.00341871
    Iteration 130, loss = 0.00321498
    Iteration 131, loss = 0.00302719
    Iteration 132, loss = 0.00304678
    Iteration 133, loss = 0.00300489
    Iteration 134, loss = 0.00285832
    Iteration 135, loss = 0.00307994
    Iteration 136, loss = 0.00265783
    Iteration 137, loss = 0.00273416
    Iteration 138, loss = 0.00289992
    Iteration 139, loss = 0.00286760
    Iteration 140, loss = 0.00260495
    Iteration 141, loss = 0.00263576
    Iteration 142, loss = 0.00241250
    Iteration 143, loss = 0.00233498
    Iteration 144, loss = 0.00273236
    Iteration 145, loss = 0.00252651
    Iteration 146, loss = 0.00236657
    Iteration 147, loss = 0.00239763
    Iteration 148, loss = 0.00230621
    Iteration 149, loss = 0.00245732
    Iteration 150, loss = 0.00236594
    Iteration 151, loss = 0.00212682
    Iteration 152, loss = 0.00203946
    Iteration 153, loss = 0.00193825
    Iteration 154, loss = 0.00187658
    Iteration 155, loss = 0.00193672
    Iteration 156, loss = 0.00183656
    Iteration 157, loss = 0.00170565
    Iteration 158, loss = 0.00178186
    Iteration 159, loss = 0.00166442
    Iteration 160, loss = 0.00162677
    Iteration 161, loss = 0.00166869
    Iteration 162, loss = 0.00174127
    Iteration 163, loss = 0.00162823
    Iteration 164, loss = 0.00169829
    Iteration 165, loss = 0.00152517
    Iteration 166, loss = 0.00149389
    Iteration 167, loss = 0.00154439
    Iteration 168, loss = 0.00159414
    Iteration 169, loss = 0.00153729
    Iteration 170, loss = 0.00146277
    Iteration 171, loss = 0.00159334
    Iteration 172, loss = 0.00149798
    Iteration 173, loss = 0.00150667
    Iteration 174, loss = 0.00136624
    Iteration 175, loss = 0.00131029
    Iteration 176, loss = 0.00134414
    Training loss did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.
    Fit against 1000 pts: : 2.05e+01 seconds




.. GENERATED FROM PYTHON SOURCE LINES 28-29

We can now simulate a torque-free attitude profile to inspect the quality of the fit

.. GENERATED FROM PYTHON SOURCE LINES 29-40

.. code-block:: Python

    t_eval = np.linspace(0, 10, 1000)
    q, _ = mr.propagate_attitude_torque_free(
        np.array([0.0, 0.0, 0.0, 1.0]),
        np.array([1.0, 1.0, 1.0]),
        np.diag([1, 2, 3]),
        t_eval,
    )
    dcm = mr.quat_to_dcm(q)
    ovb = mr.stack_mat_mult_vec(dcm, np.array([[1, 0, 0]]))
    svb = mr.stack_mat_mult_vec(dcm, np.array([[0, 1, 0]]))








.. GENERATED FROM PYTHON SOURCE LINES 41-42

Evaluating the model in its two available formats - as a native ``scikit-learn`` model and as an Open Neural Network eXchange (ONNX) model

.. GENERATED FROM PYTHON SOURCE LINES 42-49

.. code-block:: Python

    mr.tic("Evaluate trained model with sklearn")
    mdl_b_sklearn = mlp_bm.eval(ovb, svb, eval_mode_pref="sklearn")
    mr.toc()
    mr.tic("Evaluate trained model with onnx")
    mdl_b_onnx = mlp_bm.eval(ovb, svb, eval_mode_pref="onnx")
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluate trained model with sklearn: 1.22e-02 seconds
    Evaluate trained model with onnx: 2.24e-03 seconds




.. GENERATED FROM PYTHON SOURCE LINES 50-51

We can save both of these representations to file:

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: Python

    mlp_bm.save_to_file(save_as_format="onnx")
    mlp_bm.save_to_file(save_as_format="sklearn")








.. GENERATED FROM PYTHON SOURCE LINES 55-56

Now we load the model from its ``.onxx`` file we just saved and evaluate the brightness

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: Python

    mlp_bm.load_from_file(mlp_bm.onnx_file_name)
    mr.tic("Evaluate loaded model with onxx")
    mdl_onnx_loaded = mlp_bm.eval(ovb, svb, eval_mode_pref="onnx")
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluate loaded model with onxx: 1.44e-03 seconds




.. GENERATED FROM PYTHON SOURCE LINES 62-63

And we do the same for the ``scikit-learn`` ``.plk`` file we saved

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: Python

    mlp_bm.load_from_file(mlp_bm.sklearn_file_name)
    mr.tic("Evaluate loaded model with sklearn")
    mdl_sklearn_loaded = mlp_bm.eval(ovb, svb, eval_mode_pref="sklearn")
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluate loaded model with sklearn: 1.33e-02 seconds




.. GENERATED FROM PYTHON SOURCE LINES 69-70

We can easily confirm that all four model evaluations have produced the same prediction

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: Python

    print(np.max(np.abs(mdl_b_sklearn - mdl_onnx_loaded)))
    print(np.max(np.abs(mdl_b_onnx - mdl_onnx_loaded)))
    print(np.max(np.abs(mdl_b_sklearn - mdl_sklearn_loaded)))
    print(np.max(np.abs(mdl_b_onnx - mdl_sklearn_loaded)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1.146585798750266e-06
    0.0
    0.0
    1.146585798750266e-06




.. GENERATED FROM PYTHON SOURCE LINES 76-77

We can now finish off by evaluating the true brightness in this attitude profile and plot the results

.. GENERATED FROM PYTHON SOURCE LINES 77-89

.. code-block:: Python

    true_b = mlp_bm.brightness(svb, ovb)

    plt.figure()
    sns.lineplot(x=t_eval, y=true_b, errorbar=None)
    sns.lineplot(x=t_eval, y=mdl_b_sklearn, errorbar=None)
    plt.title(f"Light Curves for {obj.file_name}, {num_train} Training Points")
    plt.xlabel("Time [s]")
    plt.ylabel("Normalized brightness")
    plt.legend(["True", "Model"])
    plt.grid()
    plt.show()




.. image-sg:: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_001.png
   :alt: Light Curves for cube.obj, 1000 Training Points
   :srcset: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_001.png, /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-91

We can also train on magnitude data instead of irradiance:

.. GENERATED FROM PYTHON SOURCE LINES 91-98

.. code-block:: Python

    mlp_bm = mrsim.MLPBrightnessModel(obj, brdf, use_engine=True)
    mlp_bm.train(num_train)

    mr.tic("Evaluate trained model with onnx")
    mdl_b_onnx = mlp_bm.eval(ovb, svb)
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Compute training LC: 9.66e-01 seconds
    Iteration 1, loss = 0.17844443
    Iteration 2, loss = 0.15160641
    Iteration 3, loss = 0.12988919
    Iteration 4, loss = 0.12511636
    Iteration 5, loss = 0.12186732
    Iteration 6, loss = 0.11965046
    Iteration 7, loss = 0.12128643
    Iteration 8, loss = 0.11806777
    Iteration 9, loss = 0.11777828
    Iteration 10, loss = 0.11699617
    Iteration 11, loss = 0.11565950
    Iteration 12, loss = 0.11419936
    Iteration 13, loss = 0.11329180
    Iteration 14, loss = 0.11291878
    Iteration 15, loss = 0.11072939
    Iteration 16, loss = 0.10970452
    Iteration 17, loss = 0.10730711
    Iteration 18, loss = 0.10598384
    Iteration 19, loss = 0.10477276
    Iteration 20, loss = 0.10176991
    Iteration 21, loss = 0.10035502
    Iteration 22, loss = 0.09700890
    Iteration 23, loss = 0.09393066
    Iteration 24, loss = 0.09131544
    Iteration 25, loss = 0.08748668
    Iteration 26, loss = 0.08570698
    Iteration 27, loss = 0.08177116
    Iteration 28, loss = 0.07815553
    Iteration 29, loss = 0.07719919
    Iteration 30, loss = 0.07204158
    Iteration 31, loss = 0.07190200
    Iteration 32, loss = 0.06548673
    Iteration 33, loss = 0.05864696
    Iteration 34, loss = 0.05707196
    Iteration 35, loss = 0.05610158
    Iteration 36, loss = 0.05144711
    Iteration 37, loss = 0.05033165
    Iteration 38, loss = 0.04860747
    Iteration 39, loss = 0.04299962
    Iteration 40, loss = 0.04233965
    Iteration 41, loss = 0.03981061
    Iteration 42, loss = 0.03720945
    Iteration 43, loss = 0.03681524
    Iteration 44, loss = 0.03655777
    Iteration 45, loss = 0.03667173
    Iteration 46, loss = 0.03732308
    Iteration 47, loss = 0.03395254
    Iteration 48, loss = 0.03473223
    Iteration 49, loss = 0.03194720
    Iteration 50, loss = 0.02831572
    Iteration 51, loss = 0.02747979
    Iteration 52, loss = 0.02757700
    Iteration 53, loss = 0.02642713
    Iteration 54, loss = 0.03075006
    Iteration 55, loss = 0.02644741
    Iteration 56, loss = 0.02482184
    Iteration 57, loss = 0.02483700
    Iteration 58, loss = 0.02356910
    Iteration 59, loss = 0.02238696
    Iteration 60, loss = 0.02192578
    Iteration 61, loss = 0.02181465
    Iteration 62, loss = 0.02184563
    Iteration 63, loss = 0.01935950
    Iteration 64, loss = 0.01810109
    Iteration 65, loss = 0.01714816
    Iteration 66, loss = 0.01655841
    Iteration 67, loss = 0.01637822
    Iteration 68, loss = 0.01688748
    Iteration 69, loss = 0.01554120
    Iteration 70, loss = 0.01541583
    Iteration 71, loss = 0.01516134
    Iteration 72, loss = 0.01617018
    Iteration 73, loss = 0.02047038
    Iteration 74, loss = 0.01574716
    Iteration 75, loss = 0.01539142
    Iteration 76, loss = 0.01306164
    Iteration 77, loss = 0.01389971
    Iteration 78, loss = 0.01188860
    Iteration 79, loss = 0.01177484
    Iteration 80, loss = 0.01298262
    Iteration 81, loss = 0.01194136
    Iteration 82, loss = 0.01209656
    Iteration 83, loss = 0.01092779
    Iteration 84, loss = 0.01057109
    Iteration 85, loss = 0.00966375
    Iteration 86, loss = 0.01029421
    Iteration 87, loss = 0.00966419
    Iteration 88, loss = 0.00966196
    Iteration 89, loss = 0.00973668
    Iteration 90, loss = 0.00878686
    Iteration 91, loss = 0.00866178
    Iteration 92, loss = 0.00802520
    Iteration 93, loss = 0.00801091
    Iteration 94, loss = 0.00757557
    Iteration 95, loss = 0.00744100
    Iteration 96, loss = 0.00886581
    Iteration 97, loss = 0.00813898
    Iteration 98, loss = 0.00793771
    Iteration 99, loss = 0.00830970
    Iteration 100, loss = 0.00767224
    Iteration 101, loss = 0.00740033
    Iteration 102, loss = 0.00798237
    Iteration 103, loss = 0.00803326
    Iteration 104, loss = 0.00703683
    Iteration 105, loss = 0.00613483
    Iteration 106, loss = 0.00593078
    Iteration 107, loss = 0.00601930
    Iteration 108, loss = 0.00554586
    Iteration 109, loss = 0.00590346
    Iteration 110, loss = 0.00533750
    Iteration 111, loss = 0.00482630
    Iteration 112, loss = 0.00475816
    Iteration 113, loss = 0.00464698
    Iteration 114, loss = 0.00553856
    Iteration 115, loss = 0.00541920
    Iteration 116, loss = 0.00577928
    Iteration 117, loss = 0.00634948
    Iteration 118, loss = 0.00497115
    Iteration 119, loss = 0.00503520
    Iteration 120, loss = 0.00446837
    Iteration 121, loss = 0.00440436
    Iteration 122, loss = 0.00443306
    Iteration 123, loss = 0.00427714
    Iteration 124, loss = 0.00414701
    Iteration 125, loss = 0.00442887
    Iteration 126, loss = 0.00392086
    Iteration 127, loss = 0.00385868
    Iteration 128, loss = 0.00383586
    Iteration 129, loss = 0.00385148
    Iteration 130, loss = 0.00364139
    Iteration 131, loss = 0.00488252
    Iteration 132, loss = 0.00414143
    Iteration 133, loss = 0.00425172
    Iteration 134, loss = 0.00388740
    Iteration 135, loss = 0.00335106
    Iteration 136, loss = 0.00373574
    Iteration 137, loss = 0.00332938
    Iteration 138, loss = 0.00284880
    Iteration 139, loss = 0.00285310
    Iteration 140, loss = 0.00305937
    Iteration 141, loss = 0.00301056
    Iteration 142, loss = 0.00284424
    Iteration 143, loss = 0.00321742
    Iteration 144, loss = 0.00286339
    Iteration 145, loss = 0.00292202
    Iteration 146, loss = 0.00304655
    Iteration 147, loss = 0.00314985
    Iteration 148, loss = 0.00341030
    Iteration 149, loss = 0.00274666
    Training loss did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.
    Fit against 1000 pts: : 1.38e+01 seconds
    Evaluate trained model with onnx: 4.23e-03 seconds




.. GENERATED FROM PYTHON SOURCE LINES 99-100

We can now finish off by evaluating the true brightness in this attitude profile and plot the results

.. GENERATED FROM PYTHON SOURCE LINES 100-111

.. code-block:: Python

    true_b = mlp_bm.brightness(svb, ovb)

    plt.figure()
    sns.lineplot(x=t_eval, y=true_b, errorbar=None)
    sns.lineplot(x=t_eval, y=mdl_b_onnx, errorbar=None)
    plt.title(f"Light Curves for {obj.file_name}, {num_train} Training Points")
    plt.xlabel("Time [s]")
    plt.ylabel("Apparent Magnitude")
    plt.legend(["True", "Model"])
    plt.grid()
    plt.show()



.. image-sg:: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_002.png
   :alt: Light Curves for cube.obj, 1000 Training Points
   :srcset: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_002.png, /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_002_2_00x.png 2.00x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 37.350 seconds)


.. _sphx_glr_download_gallery_01-light_curves_neural_network_brightness.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: neural_network_brightness.ipynb <neural_network_brightness.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: neural_network_brightness.py <neural_network_brightness.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
