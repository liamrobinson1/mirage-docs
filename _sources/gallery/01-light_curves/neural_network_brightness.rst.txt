
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/01-light_curves/neural_network_brightness.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_01-light_curves_neural_network_brightness.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_01-light_curves_neural_network_brightness.py:


Neural Network Brightness
=========================

Trains a neural network to predict the brightness of a specular cube in an arbitrary lighting and observation conditions and compares the results to the truth

.. GENERATED FROM PYTHON SOURCE LINES 7-15

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np
    import seaborn as sns

    import mirage as mr
    import mirage.sim as mrsim








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Let's define the object and the BRDF

.. GENERATED FROM PYTHON SOURCE LINES 17-19

.. code-block:: default

    obj = mr.SpaceObject("cube.obj")
    brdf = mr.Brdf("phong", cd=0.5, cs=0.5, n=10)







.. GENERATED FROM PYTHON SOURCE LINES 20-21

We now define the Multi-Layer Perceptron (MLP) brightness model. Note that the ``layers=(150, 50, 150)`` keyword argument defines the number of neurons in each densely-connected layer.

.. GENERATED FROM PYTHON SOURCE LINES 21-22

.. code-block:: default

    mlp_bm = mrsim.MLPBrightnessModel(obj, brdf, use_engine=False)







.. GENERATED FROM PYTHON SOURCE LINES 23-24

Now we train the model on a set number of training lighting and observation configurations. Usually ``1e5``-``1e6`` are required for a *good* fit

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: default

    num_train = int(1e3)
    mlp_bm.train(num_train)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Compute training LC: 3.96e-03 seconds
    Iteration 1, loss = 0.17056559
    Iteration 2, loss = 0.14842601
    Iteration 3, loss = 0.14389528
    Iteration 4, loss = 0.14193047
    Iteration 5, loss = 0.14013260
    Iteration 6, loss = 0.13900178
    Iteration 7, loss = 0.13748181
    Iteration 8, loss = 0.13540239
    Iteration 9, loss = 0.13457094
    Iteration 10, loss = 0.13227573
    Iteration 11, loss = 0.13038141
    Iteration 12, loss = 0.12912400
    Iteration 13, loss = 0.12714776
    Iteration 14, loss = 0.12501917
    Iteration 15, loss = 0.12154519
    Iteration 16, loss = 0.11845741
    Iteration 17, loss = 0.11562993
    Iteration 18, loss = 0.11301757
    Iteration 19, loss = 0.10793194
    Iteration 20, loss = 0.10475987
    Iteration 21, loss = 0.10009167
    Iteration 22, loss = 0.09524277
    Iteration 23, loss = 0.08882092
    Iteration 24, loss = 0.08485289
    Iteration 25, loss = 0.08045741
    Iteration 26, loss = 0.08083759
    Iteration 27, loss = 0.07198506
    Iteration 28, loss = 0.06902958
    Iteration 29, loss = 0.06455633
    Iteration 30, loss = 0.06049079
    Iteration 31, loss = 0.05729008
    Iteration 32, loss = 0.05082390
    Iteration 33, loss = 0.05381166
    Iteration 34, loss = 0.05074866
    Iteration 35, loss = 0.05259143
    Iteration 36, loss = 0.04634133
    Iteration 37, loss = 0.04344794
    Iteration 38, loss = 0.04210128
    Iteration 39, loss = 0.03968742
    Iteration 40, loss = 0.03695777
    Iteration 41, loss = 0.03644715
    Iteration 42, loss = 0.03710096
    Iteration 43, loss = 0.03567001
    Iteration 44, loss = 0.03484754
    Iteration 45, loss = 0.03554740
    Iteration 46, loss = 0.03464010
    Iteration 47, loss = 0.03084388
    Iteration 48, loss = 0.02761767
    Iteration 49, loss = 0.02591072
    Iteration 50, loss = 0.02662364
    Iteration 51, loss = 0.02488826
    Iteration 52, loss = 0.02411221
    Iteration 53, loss = 0.02350306
    Iteration 54, loss = 0.02268271
    Iteration 55, loss = 0.02266901
    Iteration 56, loss = 0.02160406
    Iteration 57, loss = 0.02152980
    Iteration 58, loss = 0.02289782
    Iteration 59, loss = 0.02190298
    Iteration 60, loss = 0.02013691
    Iteration 61, loss = 0.01866831
    Iteration 62, loss = 0.01873763
    Iteration 63, loss = 0.01846130
    Iteration 64, loss = 0.01734555
    Iteration 65, loss = 0.01754167
    Iteration 66, loss = 0.01638587
    Iteration 67, loss = 0.01851251
    Iteration 68, loss = 0.01696914
    Iteration 69, loss = 0.01482150
    Iteration 70, loss = 0.01424129
    Iteration 71, loss = 0.01466195
    Iteration 72, loss = 0.01495001
    Iteration 73, loss = 0.01400509
    Iteration 74, loss = 0.01361882
    Iteration 75, loss = 0.01317099
    Iteration 76, loss = 0.01179114
    Iteration 77, loss = 0.01305220
    Iteration 78, loss = 0.01313442
    Iteration 79, loss = 0.01244529
    Iteration 80, loss = 0.01165057
    Iteration 81, loss = 0.01185828
    Iteration 82, loss = 0.01087356
    Iteration 83, loss = 0.00998827
    Iteration 84, loss = 0.01059721
    Iteration 85, loss = 0.00962165
    Iteration 86, loss = 0.00942727
    Iteration 87, loss = 0.00932008
    Iteration 88, loss = 0.00912529
    Iteration 89, loss = 0.00937348
    Iteration 90, loss = 0.01008507
    Iteration 91, loss = 0.00875841
    Iteration 92, loss = 0.00824387
    Iteration 93, loss = 0.00778235
    Iteration 94, loss = 0.00882334
    Iteration 95, loss = 0.00836082
    Iteration 96, loss = 0.00795522
    Iteration 97, loss = 0.00774587
    Iteration 98, loss = 0.00737837
    Iteration 99, loss = 0.00698518
    Iteration 100, loss = 0.00745584
    Iteration 101, loss = 0.00753077
    Iteration 102, loss = 0.00754126
    Iteration 103, loss = 0.00793298
    Iteration 104, loss = 0.00671427
    Iteration 105, loss = 0.00668843
    Iteration 106, loss = 0.00670193
    Iteration 107, loss = 0.00619059
    Iteration 108, loss = 0.00628412
    Iteration 109, loss = 0.00646870
    Iteration 110, loss = 0.00589585
    Iteration 111, loss = 0.00575160
    Iteration 112, loss = 0.00580311
    Iteration 113, loss = 0.00529709
    Iteration 114, loss = 0.00473757
    Iteration 115, loss = 0.00493139
    Iteration 116, loss = 0.00490924
    Iteration 117, loss = 0.00471088
    Iteration 118, loss = 0.00529671
    Iteration 119, loss = 0.00473594
    Iteration 120, loss = 0.00412777
    Iteration 121, loss = 0.00442287
    Iteration 122, loss = 0.00385720
    Iteration 123, loss = 0.00389123
    Iteration 124, loss = 0.00380248
    Iteration 125, loss = 0.00389168
    Iteration 126, loss = 0.00372134
    Iteration 127, loss = 0.00407334
    Iteration 128, loss = 0.00363569
    Iteration 129, loss = 0.00375702
    Iteration 130, loss = 0.00320515
    Iteration 131, loss = 0.00321945
    Iteration 132, loss = 0.00317944
    Iteration 133, loss = 0.00347218
    Iteration 134, loss = 0.00392572
    Iteration 135, loss = 0.00338415
    Iteration 136, loss = 0.00358345
    Iteration 137, loss = 0.00336777
    Iteration 138, loss = 0.00313383
    Iteration 139, loss = 0.00278547
    Iteration 140, loss = 0.00322279
    Iteration 141, loss = 0.00284850
    Iteration 142, loss = 0.00274164
    Iteration 143, loss = 0.00286627
    Iteration 144, loss = 0.00254625
    Iteration 145, loss = 0.00255063
    Iteration 146, loss = 0.00255362
    Iteration 147, loss = 0.00259160
    Iteration 148, loss = 0.00242043
    Iteration 149, loss = 0.00284685
    Iteration 150, loss = 0.00294792
    Iteration 151, loss = 0.00251436
    Iteration 152, loss = 0.00234345
    Iteration 153, loss = 0.00254271
    Iteration 154, loss = 0.00256031
    Iteration 155, loss = 0.00243615
    Iteration 156, loss = 0.00244937
    Iteration 157, loss = 0.00226499
    Iteration 158, loss = 0.00241755
    Iteration 159, loss = 0.00233768
    Training loss did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.
    Fit against 1000 pts: : 4.10e+00 seconds




.. GENERATED FROM PYTHON SOURCE LINES 28-29

We can now simulate a torque-free attitude profile to inspect the quality of the fit

.. GENERATED FROM PYTHON SOURCE LINES 29-40

.. code-block:: default

    t_eval = np.linspace(0, 10, 1000)
    q, _ = mr.propagate_attitude_torque_free(
        np.array([0.0, 0.0, 0.0, 1.0]),
        np.array([1.0, 1.0, 1.0]),
        np.diag([1, 2, 3]),
        t_eval,
    )
    dcm = mr.quat_to_dcm(q)
    ovb = mr.stack_mat_mult_vec(dcm, np.array([[1, 0, 0]]))
    svb = mr.stack_mat_mult_vec(dcm, np.array([[0, 1, 0]]))








.. GENERATED FROM PYTHON SOURCE LINES 41-42

Evaluating the model in its two available formats - as a native ``scikit-learn`` model and as an Open Neural Network eXchange (ONNX) model

.. GENERATED FROM PYTHON SOURCE LINES 42-49

.. code-block:: default

    mr.tic("Evaluate trained model with sklearn")
    mdl_b_sklearn = mlp_bm.eval(ovb, svb, eval_mode_pref="sklearn")
    mr.toc()
    mr.tic("Evaluate trained model with onnx")
    mdl_b_onnx = mlp_bm.eval(ovb, svb, eval_mode_pref="onnx")
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluate trained model with sklearn: 9.69e-03 seconds
    Evaluate trained model with onnx: 2.18e-03 seconds




.. GENERATED FROM PYTHON SOURCE LINES 50-51

We can save both of these representations to file:

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default

    mlp_bm.save_to_file(save_as_format="onnx")
    mlp_bm.save_to_file(save_as_format="sklearn")








.. GENERATED FROM PYTHON SOURCE LINES 55-56

Now we load the model from its ``.onxx`` file we just saved and evaluate the brightness

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default

    mlp_bm.load_from_file(mlp_bm.onnx_file_name)
    mr.tic("Evaluate loaded model with onxx")
    mdl_onnx_loaded = mlp_bm.eval(ovb, svb, eval_mode_pref="onnx")
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluate loaded model with onxx: 1.23e-03 seconds




.. GENERATED FROM PYTHON SOURCE LINES 62-63

And we do the same for the ``scikit-learn`` ``.plk`` file we saved

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: default

    mlp_bm.load_from_file(mlp_bm.sklearn_file_name)
    mr.tic("Evaluate loaded model with sklearn")
    mdl_sklearn_loaded = mlp_bm.eval(ovb, svb, eval_mode_pref="sklearn")
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Evaluate loaded model with sklearn: 1.20e-02 seconds




.. GENERATED FROM PYTHON SOURCE LINES 69-70

We can easily confirm that all four model evaluations have produced the same prediction

.. GENERATED FROM PYTHON SOURCE LINES 70-75

.. code-block:: default

    print(np.max(np.abs(mdl_b_sklearn - mdl_onnx_loaded)))
    print(np.max(np.abs(mdl_b_onnx - mdl_onnx_loaded)))
    print(np.max(np.abs(mdl_b_sklearn - mdl_sklearn_loaded)))
    print(np.max(np.abs(mdl_b_onnx - mdl_sklearn_loaded)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    9.505806835008457e-07
    0.0
    0.0
    9.505806835008457e-07




.. GENERATED FROM PYTHON SOURCE LINES 76-77

We can now finish off by evaluating the true brightness in this attitude profile and plot the results

.. GENERATED FROM PYTHON SOURCE LINES 77-89

.. code-block:: default

    true_b = mlp_bm.brightness(svb, ovb)

    plt.figure()
    sns.lineplot(x=t_eval, y=true_b, errorbar=None)
    sns.lineplot(x=t_eval, y=mdl_b_sklearn, errorbar=None)
    plt.title(f"Light Curves for {obj.file_name}, {num_train} Training Points")
    plt.xlabel("Time [s]")
    plt.ylabel("Normalized brightness")
    plt.legend(["True", "Model"])
    plt.grid()
    plt.show()




.. image-sg:: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_001.png
   :alt: Light Curves for cube.obj, 1000 Training Points
   :srcset: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_001.png, /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_001_2_00x.png 2.00x
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-91

We can also train on magnitude data instead of irradiance:

.. GENERATED FROM PYTHON SOURCE LINES 91-98

.. code-block:: default

    mlp_bm = mrsim.MLPBrightnessModel(obj, brdf, use_engine=True)
    mlp_bm.train(num_train)

    mr.tic("Evaluate trained model with onnx")
    mdl_b_onnx = mlp_bm.eval(ovb, svb)
    mr.toc()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Compute training LC: 5.30e-01 seconds
    Iteration 1, loss = 0.22473118
    Iteration 2, loss = 0.14717131
    Iteration 3, loss = 0.13298452
    Iteration 4, loss = 0.12549472
    Iteration 5, loss = 0.12337873
    Iteration 6, loss = 0.12083717
    Iteration 7, loss = 0.11912991
    Iteration 8, loss = 0.11770274
    Iteration 9, loss = 0.11687225
    Iteration 10, loss = 0.11508524
    Iteration 11, loss = 0.11437744
    Iteration 12, loss = 0.11319448
    Iteration 13, loss = 0.11180511
    Iteration 14, loss = 0.10994131
    Iteration 15, loss = 0.10865017
    Iteration 16, loss = 0.10736337
    Iteration 17, loss = 0.10444116
    Iteration 18, loss = 0.10367259
    Iteration 19, loss = 0.10184357
    Iteration 20, loss = 0.09809327
    Iteration 21, loss = 0.09705363
    Iteration 22, loss = 0.09413646
    Iteration 23, loss = 0.09011224
    Iteration 24, loss = 0.08628943
    Iteration 25, loss = 0.08318805
    Iteration 26, loss = 0.07958601
    Iteration 27, loss = 0.07627274
    Iteration 28, loss = 0.07170343
    Iteration 29, loss = 0.07025218
    Iteration 30, loss = 0.06403891
    Iteration 31, loss = 0.06125690
    Iteration 32, loss = 0.05788443
    Iteration 33, loss = 0.05695112
    Iteration 34, loss = 0.05463576
    Iteration 35, loss = 0.05091735
    Iteration 36, loss = 0.04749463
    Iteration 37, loss = 0.04528289
    Iteration 38, loss = 0.04197491
    Iteration 39, loss = 0.04135023
    Iteration 40, loss = 0.03841316
    Iteration 41, loss = 0.03742005
    Iteration 42, loss = 0.03569212
    Iteration 43, loss = 0.03327912
    Iteration 44, loss = 0.03266386
    Iteration 45, loss = 0.03061697
    Iteration 46, loss = 0.02847460
    Iteration 47, loss = 0.02838228
    Iteration 48, loss = 0.02631330
    Iteration 49, loss = 0.02482623
    Iteration 50, loss = 0.02354123
    Iteration 51, loss = 0.02212702
    Iteration 52, loss = 0.02151866
    Iteration 53, loss = 0.01992258
    Iteration 54, loss = 0.01922960
    Iteration 55, loss = 0.02016807
    Iteration 56, loss = 0.01844274
    Iteration 57, loss = 0.01725874
    Iteration 58, loss = 0.01533019
    Iteration 59, loss = 0.01537125
    Iteration 60, loss = 0.01392446
    Iteration 61, loss = 0.01324919
    Iteration 62, loss = 0.01294986
    Iteration 63, loss = 0.01338402
    Iteration 64, loss = 0.01283369
    Iteration 65, loss = 0.01239581
    Iteration 66, loss = 0.01106284
    Iteration 67, loss = 0.01037300
    Iteration 68, loss = 0.00944950
    Iteration 69, loss = 0.01026232
    Iteration 70, loss = 0.00903958
    Iteration 71, loss = 0.00918708
    Iteration 72, loss = 0.00789006
    Iteration 73, loss = 0.00828245
    Iteration 74, loss = 0.00877168
    Iteration 75, loss = 0.00730796
    Iteration 76, loss = 0.00677578
    Iteration 77, loss = 0.00703741
    Iteration 78, loss = 0.00724475
    Iteration 79, loss = 0.00656755
    Iteration 80, loss = 0.00640730
    Iteration 81, loss = 0.00676595
    Iteration 82, loss = 0.00642659
    Iteration 83, loss = 0.00596534
    Iteration 84, loss = 0.00540288
    Iteration 85, loss = 0.00500274
    Iteration 86, loss = 0.00521474
    Iteration 87, loss = 0.00517635
    Iteration 88, loss = 0.00472410
    Iteration 89, loss = 0.00458558
    Iteration 90, loss = 0.00395579
    Iteration 91, loss = 0.00380430
    Iteration 92, loss = 0.00370076
    Iteration 93, loss = 0.00376065
    Iteration 94, loss = 0.00354910
    Iteration 95, loss = 0.00361589
    Iteration 96, loss = 0.00321902
    Iteration 97, loss = 0.00313271
    Iteration 98, loss = 0.00301219
    Iteration 99, loss = 0.00299969
    Iteration 100, loss = 0.00330874
    Iteration 101, loss = 0.00321266
    Iteration 102, loss = 0.00307873
    Iteration 103, loss = 0.00352784
    Iteration 104, loss = 0.00278391
    Iteration 105, loss = 0.00278518
    Iteration 106, loss = 0.00266149
    Iteration 107, loss = 0.00263910
    Iteration 108, loss = 0.00254877
    Iteration 109, loss = 0.00247739
    Iteration 110, loss = 0.00253657
    Iteration 111, loss = 0.00286453
    Iteration 112, loss = 0.00277695
    Iteration 113, loss = 0.00270153
    Iteration 114, loss = 0.00251272
    Iteration 115, loss = 0.00213583
    Iteration 116, loss = 0.00199933
    Iteration 117, loss = 0.00223474
    Iteration 118, loss = 0.00204722
    Iteration 119, loss = 0.00206976
    Iteration 120, loss = 0.00188186
    Iteration 121, loss = 0.00204879
    Iteration 122, loss = 0.00203143
    Iteration 123, loss = 0.00186810
    Iteration 124, loss = 0.00177419
    Iteration 125, loss = 0.00178989
    Iteration 126, loss = 0.00183124
    Iteration 127, loss = 0.00176613
    Iteration 128, loss = 0.00159610
    Iteration 129, loss = 0.00160603
    Iteration 130, loss = 0.00166100
    Iteration 131, loss = 0.00181527
    Iteration 132, loss = 0.00167433
    Iteration 133, loss = 0.00171088
    Iteration 134, loss = 0.00157461
    Iteration 135, loss = 0.00143129
    Iteration 136, loss = 0.00132596
    Iteration 137, loss = 0.00151641
    Iteration 138, loss = 0.00138609
    Iteration 139, loss = 0.00170247
    Iteration 140, loss = 0.00120374
    Iteration 141, loss = 0.00108483
    Iteration 142, loss = 0.00102848
    Iteration 143, loss = 0.00098660
    Iteration 144, loss = 0.00109687
    Iteration 145, loss = 0.00099860
    Iteration 146, loss = 0.00101492
    Iteration 147, loss = 0.00094153
    Iteration 148, loss = 0.00089564
    Iteration 149, loss = 0.00085784
    Iteration 150, loss = 0.00087020
    Iteration 151, loss = 0.00086850
    Iteration 152, loss = 0.00089824
    Training loss did not improve more than tol=0.000100 for 10 consecutive epochs. Stopping.
    Fit against 1000 pts: : 3.58e+00 seconds
    Evaluate trained model with onnx: 1.62e-02 seconds




.. GENERATED FROM PYTHON SOURCE LINES 99-100

We can now finish off by evaluating the true brightness in this attitude profile and plot the results

.. GENERATED FROM PYTHON SOURCE LINES 100-111

.. code-block:: default

    true_b = mlp_bm.brightness(svb, ovb)

    plt.figure()
    sns.lineplot(x=t_eval, y=true_b, errorbar=None)
    sns.lineplot(x=t_eval, y=mdl_b_onnx, errorbar=None)
    plt.title(f"Light Curves for {obj.file_name}, {num_train} Training Points")
    plt.xlabel("Time [s]")
    plt.ylabel("Apparent Magnitude")
    plt.legend(["True", "Model"])
    plt.grid()
    plt.show()



.. image-sg:: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_002.png
   :alt: Light Curves for cube.obj, 1000 Training Points
   :srcset: /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_002.png, /gallery/01-light_curves/images/sphx_glr_neural_network_brightness_002_2_00x.png 2.00x
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.633 seconds)


.. _sphx_glr_download_gallery_01-light_curves_neural_network_brightness.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: neural_network_brightness.py <neural_network_brightness.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: neural_network_brightness.ipynb <neural_network_brightness.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
