
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/02-lighting/reflected_albedo.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_02-lighting_reflected_albedo.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_02-lighting_reflected_albedo.py:


Earth Albedo BRDF
=================

Modeling the incident radiation at a spacecraft due to reflected sunlight from the Earth

.. GENERATED FROM PYTHON SOURCE LINES 9-12

Useful papers not cited below:
`Kuvyrkin 2016 <https://arc.aiaa.org/doi/pdf/10.2514/1.A33349>`_
`Strahler 1999 <https://modis.gsfc.nasa.gov/data/atbd/atbd_mod09.pdf>`_

.. GENERATED FROM PYTHON SOURCE LINES 14-15

Let's first load the coefficient arrays :math:`f_{iso}`, :math:`f_{geo}`, and :math:`f_{vol}` from file

.. GENERATED FROM PYTHON SOURCE LINES 15-33

.. code-block:: default



    import pyspaceaware as ps

    import matplotlib.pyplot as plt
    import numpy as np
    import datetime

    save_dict = ps.load_albedo_file()
    fiso_map = np.array(save_dict["fiso_map"])
    fgeo_map = np.array(save_dict["fgeo_map"])
    fvol_map = np.array(save_dict["fvol_map"])
    lat_geod_grid = np.array(save_dict["lat_geod_grid"])
    lon_grid = np.array(save_dict["lon_grid"])
    lat_geod_space = lat_geod_grid[:, 0]
    lon_space = lon_grid[0, :]
    mapshape = lon_grid.shape








.. GENERATED FROM PYTHON SOURCE LINES 34-35

The surface BRDF function in `Blanc 2014 <https://hal-mines-paristech.archives-ouvertes.fr/file/index/docid/1024989/filename/2014_igarss_albedo_blanc.pdf>`_

.. GENERATED FROM PYTHON SOURCE LINES 35-46

.. code-block:: default


    pws = (
        lambda ts, fiso, fgeo, fvol: fiso
        + fvol * (-0.007574 - 0.070987 * ts**2 + 0.307588 * ts**3)
        + fgeo * (-1.284909 - 0.166314 * ts**2 + 0.041840 * ts**3)
    )
    pbs = lambda ts, fiso, fgeo, fvol: fiso + 0.189184 * fvol - 1.377622 * fgeo
    albedo = lambda ts, fiso, fgeo, fvol: 0.5 * pws(ts, fiso, fgeo, fvol) + 0.5 * pbs(
        ts, fiso, fgeo, fvol
    )








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Now we define the date to evaluate the reflected albedo irradiance at and the ECEF position of the satellite

.. GENERATED FROM PYTHON SOURCE LINES 48-52

.. code-block:: default

    date = datetime.datetime(2022, 6, 23, 5, 53, 0, tzinfo=datetime.timezone.utc)
    datestr = f'{date.strftime("%Y-%m-%d %H:%M:%S")} UTC'
    sat_pos_ecef = (6378 + 4e4) * ps.hat(np.array([[1, 1, 0]]))








.. GENERATED FROM PYTHON SOURCE LINES 53-54

Now we identify all the useful geometry: the ECEF positions of the grid cells, the Sun vector, the solar zenith angle at each grid cell, and the albedo at each point

.. GENERATED FROM PYTHON SOURCE LINES 54-66

.. code-block:: default

    ecef_grid = ps.lla_to_itrf(
        lat_geod=lat_geod_grid.flatten(),
        lon=lon_grid.flatten(),
        alt_km=0 * lon_grid.flatten(),
    )
    j2000_to_itrf_rotm = ps.itrf_to_j2000(date).T
    sun_ecef_hat = (j2000_to_itrf_rotm @ ps.hat(ps.sun(date)).T).T
    sun_dir = np.tile(sun_ecef_hat, (ecef_grid.shape[0], 1))
    solar_zenith = np.arccos(ps.dot(ps.hat(ecef_grid), sun_dir))
    solar_zenith_grid = solar_zenith.reshape(mapshape)
    albedo_grid = albedo(solar_zenith_grid, fiso_map, fgeo_map, fvol_map)








.. GENERATED FROM PYTHON SOURCE LINES 67-68

For fun, let's classify the types of twilight to plot later

.. GENERATED FROM PYTHON SOURCE LINES 68-84

.. code-block:: default

    solar_type_grid = np.zeros_like(solar_zenith_grid)
    solar_type_grid[
        (solar_zenith_grid > np.pi / 2) & (solar_zenith_grid < np.pi / 2 + np.deg2rad(18))
    ] = 3
    # Astronomical twilight
    solar_type_grid[
        (solar_zenith_grid > np.pi / 2) & (solar_zenith_grid < np.pi / 2 + np.deg2rad(12))
    ] = 2
    # Nautical twilight
    solar_type_grid[
        (solar_zenith_grid > np.pi / 2) & (solar_zenith_grid < np.pi / 2 + np.deg2rad(6))
    ] = 1
    # Civil twilight
    solar_type_grid[solar_zenith_grid > np.pi / 2 + np.deg2rad(16)] = 4
    # Night








.. GENERATED FROM PYTHON SOURCE LINES 85-86

Computing which grid cells are visible from the satellite

.. GENERATED FROM PYTHON SOURCE LINES 86-111

.. code-block:: default

    surf_to_sat = sat_pos_ecef - ecef_grid
    surf_to_sat_dir = ps.hat(surf_to_sat)
    surf_to_sat_rmag_m_grid = 1e3 * ps.vecnorm(surf_to_sat).reshape(mapshape)
    tosat_to_normal_ang = np.arccos(ps.dot(ps.hat(ecef_grid), surf_to_sat_dir))
    tosat_to_normal_grid = tosat_to_normal_ang.reshape(mapshape)
    pt_visible_from_sat = tosat_to_normal_grid < np.pi / 2

    # Visible and illuminated points
    ill_and_vis = pt_visible_from_sat & (solar_type_grid == 0)
    brdf_to_brightness = np.cos(solar_zenith_grid) * np.cos(tosat_to_normal_grid)
    loss_at_surf_diffuse = brdf_to_brightness * ill_and_vis * albedo_grid
    is_ocean = np.abs(albedo_grid - albedo_grid[0, 0]) < 1e-8
    loss_at_surface_specular = (
        ps.brdf_phong(sun_dir, surf_to_sat_dir, ps.hat(ecef_grid), 0, 0.4, 10).reshape(
            mapshape
        )
        * is_ocean
        * brdf_to_brightness
    )

    obs_type_grid = np.zeros_like(solar_zenith_grid)
    obs_type_grid[pt_visible_from_sat] = 1
    obs_type_grid[(solar_type_grid == 0) & ~pt_visible_from_sat] = 2
    obs_type_grid[ill_and_vis] = 3








.. GENERATED FROM PYTHON SOURCE LINES 112-113

Computes the areas of each grid cell

.. GENERATED FROM PYTHON SOURCE LINES 113-124

.. code-block:: default

    dp, dt = (
        lat_geod_space[1] - lat_geod_space[0],
        lon_space[1] - lon_space[0],
    )
    cell_area_grid = np.tile(
        np.array(
            [ps.lat_lon_cell_area((p + dp, p), (0, dt)) for p in lat_geod_space]
        ).reshape(-1, 1),
        (1, lon_space.size),
    )








.. GENERATED FROM PYTHON SOURCE LINES 125-126

Computing Lambertian reflection (for the land) and Phong reflection (for the ocean) from each grid cell

.. GENERATED FROM PYTHON SOURCE LINES 126-135

.. code-block:: default

    rmag_loss_grid = 1 / surf_to_sat_rmag_m_grid**2
    irrad_from_surf = (
        ps.total_solar_irradiance_at_dates(date)
        * rmag_loss_grid
        * cell_area_grid
        * (loss_at_surf_diffuse + loss_at_surface_specular)
    )
    print(f"{np.sum(irrad_from_surf):.2e}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    6.28e+00




.. GENERATED FROM PYTHON SOURCE LINES 136-137

Let's compare with the implementation in the pyspaceaware package

.. GENERATED FROM PYTHON SOURCE LINES 137-142

.. code-block:: default

    ps.tic()
    alb_irrad = ps.albedo_irradiance(date, sat_pos_ecef)
    ps.toc()
    print(f"{alb_irrad:.2e}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Elapsed time: 3.26e-01 seconds
    6.28e+00




.. GENERATED FROM PYTHON SOURCE LINES 143-144

Defining a few useful functions to simplify the plotting process

.. GENERATED FROM PYTHON SOURCE LINES 144-146

.. code-block:: default

    bcmap = "PiYG"








.. GENERATED FROM PYTHON SOURCE LINES 147-148

Plotting the albedo across the grid

.. GENERATED FROM PYTHON SOURCE LINES 148-152

.. code-block:: default

    ps.plot_map_with_grid(
        albedo_grid, "March Mean Albedo", "Surface Albedo", cmap="PuBuGn_r", borders=True
    )




.. image-sg:: /gallery/02-lighting/images/sphx_glr_reflected_albedo_001.png
   :alt: March Mean Albedo
   :srcset: /gallery/02-lighting/images/sphx_glr_reflected_albedo_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 153-154

Plotting the solar zenith angle

.. GENERATED FROM PYTHON SOURCE LINES 154-162

.. code-block:: default

    ps.plot_map_with_grid(
        solar_zenith_grid,
        f"Solar Zenith Angles: {datestr}",
        "Solar zenith angle [rad]",
        cmap="Blues",
        borders=True,
    )




.. image-sg:: /gallery/02-lighting/images/sphx_glr_reflected_albedo_002.png
   :alt: Solar Zenith Angles: 2022-06-23 05:53:00 UTC
   :srcset: /gallery/02-lighting/images/sphx_glr_reflected_albedo_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 163-164

Plotting the twilight types

.. GENERATED FROM PYTHON SOURCE LINES 164-180

.. code-block:: default

    ps.plot_map_with_grid(
        solar_type_grid,
        f"Twilight Types: {datestr}",
        "Solar zenith angle [rad]",
        cmap="Blues",
        borders=True,
        cbar_tick_labels=[
            "Day",
            "Civil twilight",
            "Nautical twilight",
            "Astronomical twilight",
            "Night",
        ],
    )





.. image-sg:: /gallery/02-lighting/images/sphx_glr_reflected_albedo_003.png
   :alt: Twilight Types: 2022-06-23 05:53:00 UTC
   :srcset: /gallery/02-lighting/images/sphx_glr_reflected_albedo_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 181-182

Plotting grid cell visibility and illumination conditions

.. GENERATED FROM PYTHON SOURCE LINES 182-197

.. code-block:: default

    ps.plot_map_with_grid(
        obs_type_grid,
        f"Observation Conditions: {datestr}",
        f"Twilight Types",
        cmap=plt.cm.get_cmap("Paired", 4),
        borders=True,
        interpolation="nearest",
        cbar_tick_labels=[
            "Not visible or illum.",
            "Visible not illum.",
            "Illum. not visible",
            "Illum. and visible",
        ],
    )




.. image-sg:: /gallery/02-lighting/images/sphx_glr_reflected_albedo_004.png
   :alt: Observation Conditions: 2022-06-23 05:53:00 UTC
   :srcset: /gallery/02-lighting/images/sphx_glr_reflected_albedo_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/liamrobinson/Documents/PyLightCurves/examples/02-lighting/reflected_albedo.py:186: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.
      cmap=plt.cm.get_cmap("Paired", 4),




.. GENERATED FROM PYTHON SOURCE LINES 198-199

BRDF kernel values at each point

.. GENERATED FROM PYTHON SOURCE LINES 199-208

.. code-block:: default

    ps.plot_map_with_grid(
        loss_at_surf_diffuse + loss_at_surface_specular,
        f"BRDF Kernel: {datestr}",
        f"",
        cmap="Blues",
        borders=True,
        interpolation="nearest",
    )




.. image-sg:: /gallery/02-lighting/images/sphx_glr_reflected_albedo_005.png
   :alt: BRDF Kernel: 2022-06-23 05:53:00 UTC
   :srcset: /gallery/02-lighting/images/sphx_glr_reflected_albedo_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 209-210

Plotting the areas of each grid cell

.. GENERATED FROM PYTHON SOURCE LINES 210-219

.. code-block:: default

    ps.plot_map_with_grid(
        cell_area_grid,
        f"Cell Areas: {datestr}",
        "$[m^2]$",
        cmap="Blues",
        borders=True,
        interpolation="nearest",
    )




.. image-sg:: /gallery/02-lighting/images/sphx_glr_reflected_albedo_006.png
   :alt: Cell Areas: 2022-06-23 05:53:00 UTC
   :srcset: /gallery/02-lighting/images/sphx_glr_reflected_albedo_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 220-221

Plotting the irradiance from each grid cell

.. GENERATED FROM PYTHON SOURCE LINES 221-230

.. code-block:: default

    ps.plot_map_with_grid(
        irrad_from_surf,
        f"Reflected Irradiance: {datestr}",
        r"$\left[W/m^2\right]$",
        cmap="hot",
        borders=True,
        border_color="lime",
        interpolation="nearest",
    )



.. image-sg:: /gallery/02-lighting/images/sphx_glr_reflected_albedo_007.png
   :alt: Reflected Irradiance: 2022-06-23 05:53:00 UTC
   :srcset: /gallery/02-lighting/images/sphx_glr_reflected_albedo_007.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.405 seconds)


.. _sphx_glr_download_gallery_02-lighting_reflected_albedo.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reflected_albedo.py <reflected_albedo.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reflected_albedo.ipynb <reflected_albedo.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
