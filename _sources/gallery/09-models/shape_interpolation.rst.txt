
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/09-models/shape_interpolation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_09-models_shape_interpolation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_09-models_shape_interpolation.py:


Shape Interpolation
===================

Given two shapes as triangulated 3D models, how can we smoothly interpolate another model between them using signed distance fields

.. GENERATED FROM PYTHON SOURCE LINES 7-13

.. code-block:: Python


    import numpy as np
    import pyvista as pv

    import mirage as mr








.. GENERATED FROM PYTHON SOURCE LINES 14-15

Animating the entire interpolation

.. GENERATED FROM PYTHON SOURCE LINES 15-36

.. code-block:: Python


    obj1 = mr.SpaceObject("icosahedron.obj").clean()
    obj2 = mr.SpaceObject("duck.obj").clean()

    pl = pv.Plotter()
    pl.open_gif("shape_interpolation.gif")

    for frac1 in np.concatenate((np.linspace(0, 1, 20), np.linspace(1, 0, 20))):
        weights = np.array([1 - frac1, frac1]).astype(float)
        mr.tic()
        obj_merged = mr.merge_shapes([obj1, obj2], weights)
        mr.toc()
        pl.add_mesh(obj_merged._mesh, color="lightblue", name="mesh", smooth_shading=True)
        pl.add_text(
            f"{weights[0]*100:3.0f}% Icosahedron \n{weights[1]*100:3.0f}% Duck",
            font="courier",
            name="label",
        )
        pl.write_frame()
    pl.close()




.. image-sg:: /gallery/09-models/images/sphx_glr_shape_interpolation_001.gif
   :alt: shape interpolation
   :srcset: /gallery/09-models/images/sphx_glr_shape_interpolation_001.gif
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Elapsed time: 7.33e-01 seconds
    Elapsed time: 6.75e-01 seconds
    Elapsed time: 6.83e-01 seconds
    Elapsed time: 8.36e-01 seconds
    Elapsed time: 7.71e-01 seconds
    Elapsed time: 7.51e-01 seconds
    Elapsed time: 7.95e-01 seconds
    Elapsed time: 7.10e-01 seconds
    Elapsed time: 8.11e-01 seconds
    Elapsed time: 6.88e-01 seconds
    Elapsed time: 7.08e-01 seconds
    Elapsed time: 7.96e-01 seconds
    Elapsed time: 7.00e-01 seconds
    Elapsed time: 8.01e-01 seconds
    Elapsed time: 7.34e-01 seconds
    Elapsed time: 7.52e-01 seconds
    Elapsed time: 8.11e-01 seconds
    Elapsed time: 7.72e-01 seconds
    Elapsed time: 8.12e-01 seconds
    Elapsed time: 8.30e-01 seconds
    Elapsed time: 8.87e-01 seconds
    Elapsed time: 8.74e-01 seconds
    Elapsed time: 1.11e+00 seconds
    Elapsed time: 8.14e-01 seconds
    Elapsed time: 7.58e-01 seconds
    Elapsed time: 7.40e-01 seconds
    Elapsed time: 7.52e-01 seconds
    Elapsed time: 7.89e-01 seconds
    Elapsed time: 7.22e-01 seconds
    Elapsed time: 7.72e-01 seconds
    Elapsed time: 7.81e-01 seconds
    Elapsed time: 7.10e-01 seconds
    Elapsed time: 7.85e-01 seconds
    Elapsed time: 7.79e-01 seconds
    Elapsed time: 1.00e+00 seconds
    Elapsed time: 8.79e-01 seconds
    Elapsed time: 7.48e-01 seconds
    Elapsed time: 8.51e-01 seconds
    Elapsed time: 7.44e-01 seconds
    Elapsed time: 8.65e-01 seconds




.. GENERATED FROM PYTHON SOURCE LINES 37-38

Individual interpolation steps in a grid

.. GENERATED FROM PYTHON SOURCE LINES 38-58

.. code-block:: Python


    pl = pv.Plotter(shape=(2, 2))

    for i, weight1 in enumerate(np.linspace(0, 1, 4)):
        weights = np.array([1 - weight1, weight1]).astype(float)
        obj_merged = mr.merge_shapes(
            [
                mr.SpaceObject("icosahedron.obj").clean(),
                mr.SpaceObject("torus.obj").clean(),
            ],
            weights,
        )
        pl.subplot(i // 2, i % 2)
        pl.add_mesh(obj_merged._mesh, color="lightblue", name="mesh", smooth_shading=True)
        pl.add_text(
            f"{weights[0]*100:3.0f}% Icosahedron \n{weights[1]*100:3.0f}% Torus",
            font="courier",
            name="label",
        )
    pl.show()



.. image-sg:: /gallery/09-models/images/sphx_glr_shape_interpolation_002.png
   :alt: shape interpolation
   :srcset: /gallery/09-models/images/sphx_glr_shape_interpolation_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Model file torus.obj not found in current model folder ('/Users/liamrobinson/Documents/mirage/mirage/resources/models'), checking model repository...
    Attempting to download torus.obj and its associated material file from the model repository...
    Requesting: https://raw.githubusercontent.com/liamrobinson1/Light-Curve-Models/main//Non-Convex/torus.obj
    Requesting: https://raw.githubusercontent.com/liamrobinson1/Light-Curve-Models/main//Non-Convex/torus.mtl
    Model files were downloaded successfully!
    Attempting to download spacelib.obj and its associated material file from the model repository...
    Requesting: https://raw.githubusercontent.com/liamrobinson1/Light-Curve-Models/main//accurate_sats/spacelib.mtl
    Model files were downloaded successfully!





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 42.324 seconds)


.. _sphx_glr_download_gallery_09-models_shape_interpolation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: shape_interpolation.ipynb <shape_interpolation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: shape_interpolation.py <shape_interpolation.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
